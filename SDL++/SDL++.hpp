#pragma once
// Autogenerated with ../gen.py

#include <SDL3/SDL.h>
#include <exception>
#include <string>

namespace SDL {

class Error : public std::exception
{
    const char* msg;
public:
    Error(const char* msg) : msg(msg) { }
    const char* what() const throw() { return msg; }
};

bool operator!(SDL_GUID id)
{
    for (size_t i = 0; i < 16; i++)
    {
        if (id.data[i] != 0) return false;
    }
    return true;
}

enum WindowFlags
{
    UTILITY = SDL_UINT64_C(0x0000000000020000),
    TRANSPARENT = SDL_UINT64_C(0x0000000040000000),
    MOUSE_RELATIVE_MODE = SDL_UINT64_C(0x0000000000008000),
    HIDDEN = SDL_UINT64_C(0x0000000000000008),
    OPENGL = SDL_UINT64_C(0x0000000000000002),
    MOUSE_CAPTURE = SDL_UINT64_C(0x0000000000004000),
    VULKAN = SDL_UINT64_C(0x0000000010000000),
    MINIMIZED = SDL_UINT64_C(0x0000000000000040),
    BORDERLESS = SDL_UINT64_C(0x0000000000000010),
    ALWAYS_ON_TOP = SDL_UINT64_C(0x0000000000010000),
    MAXIMIZED = SDL_UINT64_C(0x0000000000000080),
    INPUT_FOCUS = SDL_UINT64_C(0x0000000000000200),
    POPUP_MENU = SDL_UINT64_C(0x0000000000080000),
    MOUSE_GRABBED = SDL_UINT64_C(0x0000000000000100),
    NOT_FOCUSABLE = SDL_UINT64_C(0x0000000080000000),
    RESIZABLE = SDL_UINT64_C(0x0000000000000020),
    HIGH_PIXEL_DENSITY = SDL_UINT64_C(0x0000000000002000),
    MOUSE_FOCUS = SDL_UINT64_C(0x0000000000000400),
    MODAL = SDL_UINT64_C(0x0000000000001000),
    METAL = SDL_UINT64_C(0x0000000020000000),
    FULLSCREEN = SDL_UINT64_C(0x0000000000000001),
    KEYBOARD_GRABBED = SDL_UINT64_C(0x0000000000100000),
    TOOLTIP = SDL_UINT64_C(0x0000000000040000),
    EXTERNAL = SDL_UINT64_C(0x0000000000000800),
    OCCLUDED = SDL_UINT64_C(0x0000000000000004)
};

enum GlobFlags
{
    CASEINSENSITIVE = (1u << 0)
};

enum GPUTextureUsageFlags
{
    COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE = (1u << 6),
    SAMPLER = (1u << 0),
    COMPUTE_STORAGE_READ = (1u << 4),
    GRAPHICS_STORAGE_READ = (1u << 3),
    DEPTH_STENCIL_TARGET = (1u << 2),
    COLOR_TARGET = (1u << 1),
    COMPUTE_STORAGE_WRITE = (1u << 5)
};

enum InitFlags
{
    VIDEO = 0x00000020u,
    HAPTIC = 0x00001000u,
    CAMERA = 0x00010000u,
    GAMEPAD = 0x00002000u,
    JOYSTICK = 0x00000200u,
    EVENTS = 0x00004000u,
    SENSOR = 0x00008000u,
    AUDIO = 0x00000010u
};

enum MessageBoxFlags
{
    BUTTON_ESCAPEKEY_DEFAULT = 0x00000002u,
    WARNING = 0x00000020u,
    INFORMATION = 0x00000040u,
    BUTTONS_LEFT_TO_RIGHT = 0x00000080u,
    BUTTONS_RIGHT_TO_LEFT = 0x00000100u,
    ERROR = 0x00000010u,
    BUTTON_RETURNKEY_DEFAULT = 0x00000001u
};

enum TrayEntryFlags
{
    BUTTON = 0x00000001u,
    CHECKBOX = 0x00000002u,
    CHECKED = 0x40000000u,
    SUBMENU = 0x00000004u,
    DISABLED = 0x80000000u
};

namespace raw
{
//! @copydoc SDL_malloc()
inline void* malloc(size_t size) { return SDL_malloc(size); }

//! @copydoc SDL_calloc()
inline void* calloc(size_t nmemb, size_t size) { return SDL_calloc(nmemb, size); }

//! @copydoc SDL_realloc()
inline void* realloc(void* mem, size_t size) { return SDL_realloc(mem, size); }

//! @copydoc SDL_free()
inline void free(void* mem) {  SDL_free(mem); }

//! @copydoc SDL_GetOriginalMemoryFunctions()
inline void GetOriginalMemoryFunctions(SDL_malloc_func* malloc_func, SDL_calloc_func* calloc_func, SDL_realloc_func* realloc_func, SDL_free_func* free_func) {  SDL_GetOriginalMemoryFunctions(malloc_func, calloc_func, realloc_func, free_func); }

//! @copydoc SDL_GetMemoryFunctions()
inline void GetMemoryFunctions(SDL_malloc_func* malloc_func, SDL_calloc_func* calloc_func, SDL_realloc_func* realloc_func, SDL_free_func* free_func) {  SDL_GetMemoryFunctions(malloc_func, calloc_func, realloc_func, free_func); }

//! @copydoc SDL_SetMemoryFunctions()
inline bool SetMemoryFunctions(SDL_malloc_func malloc_func, SDL_calloc_func calloc_func, SDL_realloc_func realloc_func, SDL_free_func free_func) { auto _ret = SDL_SetMemoryFunctions(malloc_func, calloc_func, realloc_func, free_func); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_aligned_alloc()
inline void* aligned_alloc(size_t alignment, size_t size) { return SDL_aligned_alloc(alignment, size); }

//! @copydoc SDL_aligned_free()
inline void aligned_free(void* mem) {  SDL_aligned_free(mem); }

//! @copydoc SDL_GetNumAllocations()
inline int GetNumAllocations() { return SDL_GetNumAllocations(); }

//! @copydoc SDL_GetEnvironment()
inline SDL_Environment* GetEnvironment() { auto _ret = SDL_GetEnvironment(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateEnvironment()
inline SDL_Environment* CreateEnvironment(bool populated) { auto _ret = SDL_CreateEnvironment(populated); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetEnvironmentVariable()
inline const char* GetEnvironmentVariable(SDL_Environment* env, const char* name) { return SDL_GetEnvironmentVariable(env, name); }

//! @copydoc SDL_GetEnvironmentVariables()
inline char** GetEnvironmentVariables(SDL_Environment* env) { auto _ret = SDL_GetEnvironmentVariables(env); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetEnvironmentVariable()
inline bool SetEnvironmentVariable(SDL_Environment* env, const char* name, const char* value, bool overwrite) { auto _ret = SDL_SetEnvironmentVariable(env, name, value, overwrite); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UnsetEnvironmentVariable()
inline bool UnsetEnvironmentVariable(SDL_Environment* env, const char* name) { auto _ret = SDL_UnsetEnvironmentVariable(env, name); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroyEnvironment()
inline void DestroyEnvironment(SDL_Environment* env) {  SDL_DestroyEnvironment(env); }

//! @copydoc SDL_getenv()
inline const char* getenv(const char* name) { return SDL_getenv(name); }

//! @copydoc SDL_getenv_unsafe()
inline const char* getenv_unsafe(const char* name) { return SDL_getenv_unsafe(name); }

//! @copydoc SDL_setenv_unsafe()
inline int setenv_unsafe(const char* name, const char* value, int overwrite) { return SDL_setenv_unsafe(name, value, overwrite); }

//! @copydoc SDL_unsetenv_unsafe()
inline int unsetenv_unsafe(const char* name) { return SDL_unsetenv_unsafe(name); }

//! @copydoc SDL_qsort()
inline void qsort(void* base, size_t nmemb, size_t size, SDL_CompareCallback compare) {  SDL_qsort(base, nmemb, size, compare); }

//! @copydoc SDL_bsearch()
inline void* bsearch(const void* key, const void* base, size_t nmemb, size_t size, SDL_CompareCallback compare) { return SDL_bsearch(key, base, nmemb, size, compare); }

//! @copydoc SDL_qsort_r()
inline void qsort_r(void* base, size_t nmemb, size_t size, SDL_CompareCallback_r compare, void* userdata) {  SDL_qsort_r(base, nmemb, size, compare, userdata); }

//! @copydoc SDL_bsearch_r()
inline void* bsearch_r(const void* key, const void* base, size_t nmemb, size_t size, SDL_CompareCallback_r compare, void* userdata) { return SDL_bsearch_r(key, base, nmemb, size, compare, userdata); }

//! @copydoc SDL_abs()
inline int abs(int x) { return SDL_abs(x); }

//! @copydoc SDL_isalpha()
inline int isalpha(int x) { return SDL_isalpha(x); }

//! @copydoc SDL_isalnum()
inline int isalnum(int x) { return SDL_isalnum(x); }

//! @copydoc SDL_isblank()
inline int isblank(int x) { return SDL_isblank(x); }

//! @copydoc SDL_iscntrl()
inline int iscntrl(int x) { return SDL_iscntrl(x); }

//! @copydoc SDL_isdigit()
inline int isdigit(int x) { return SDL_isdigit(x); }

//! @copydoc SDL_isxdigit()
inline int isxdigit(int x) { return SDL_isxdigit(x); }

//! @copydoc SDL_ispunct()
inline int ispunct(int x) { return SDL_ispunct(x); }

//! @copydoc SDL_isspace()
inline int isspace(int x) { return SDL_isspace(x); }

//! @copydoc SDL_isupper()
inline int isupper(int x) { return SDL_isupper(x); }

//! @copydoc SDL_islower()
inline int islower(int x) { return SDL_islower(x); }

//! @copydoc SDL_isprint()
inline int isprint(int x) { return SDL_isprint(x); }

//! @copydoc SDL_isgraph()
inline int isgraph(int x) { return SDL_isgraph(x); }

//! @copydoc SDL_toupper()
inline int toupper(int x) { return SDL_toupper(x); }

//! @copydoc SDL_tolower()
inline int tolower(int x) { return SDL_tolower(x); }

//! @copydoc SDL_crc16()
inline Uint16 crc16(Uint16 crc, const void* data, size_t len) { return SDL_crc16(crc, data, len); }

//! @copydoc SDL_crc32()
inline Uint32 crc32(Uint32 crc, const void* data, size_t len) { return SDL_crc32(crc, data, len); }

//! @copydoc SDL_murmur3_32()
inline Uint32 murmur3_32(const void* data, size_t len, Uint32 seed) { return SDL_murmur3_32(data, len, seed); }

//! @copydoc SDL_memcpy()
inline void* memcpy(void* dst, const void* src, size_t len) { return SDL_memcpy(dst, src, len); }

//! @copydoc SDL_memmove()
inline void* memmove(void* dst, const void* src, size_t len) { return SDL_memmove(dst, src, len); }

//! @copydoc SDL_memset()
inline void* memset(void* dst, int c, size_t len) { return SDL_memset(dst, c, len); }

//! @copydoc SDL_memset4()
inline void* memset4(void* dst, Uint32 val, size_t dwords) { return SDL_memset4(dst, val, dwords); }

//! @copydoc SDL_memcmp()
inline int memcmp(const void* s1, const void* s2, size_t len) { return SDL_memcmp(s1, s2, len); }

//! @copydoc SDL_wcslen()
inline size_t wcslen(const wchar_t* wstr) { return SDL_wcslen(wstr); }

//! @copydoc SDL_wcsnlen()
inline size_t wcsnlen(const wchar_t* wstr, size_t maxlen) { return SDL_wcsnlen(wstr, maxlen); }

//! @copydoc SDL_wcslcpy()
inline size_t wcslcpy(wchar_t* dst, const wchar_t* src, size_t maxlen) { return SDL_wcslcpy(dst, src, maxlen); }

//! @copydoc SDL_wcslcat()
inline size_t wcslcat(wchar_t* dst, const wchar_t* src, size_t maxlen) { return SDL_wcslcat(dst, src, maxlen); }

//! @copydoc SDL_wcsdup()
inline wchar_t* wcsdup(const wchar_t* wstr) { return SDL_wcsdup(wstr); }

//! @copydoc SDL_wcsstr()
inline wchar_t* wcsstr(const wchar_t* haystack, const wchar_t* needle) { return SDL_wcsstr(haystack, needle); }

//! @copydoc SDL_wcsnstr()
inline wchar_t* wcsnstr(const wchar_t* haystack, const wchar_t* needle, size_t maxlen) { return SDL_wcsnstr(haystack, needle, maxlen); }

//! @copydoc SDL_wcscmp()
inline int wcscmp(const wchar_t* str1, const wchar_t* str2) { return SDL_wcscmp(str1, str2); }

//! @copydoc SDL_wcsncmp()
inline int wcsncmp(const wchar_t* str1, const wchar_t* str2, size_t maxlen) { return SDL_wcsncmp(str1, str2, maxlen); }

//! @copydoc SDL_wcscasecmp()
inline int wcscasecmp(const wchar_t* str1, const wchar_t* str2) { return SDL_wcscasecmp(str1, str2); }

//! @copydoc SDL_wcsncasecmp()
inline int wcsncasecmp(const wchar_t* str1, const wchar_t* str2, size_t maxlen) { return SDL_wcsncasecmp(str1, str2, maxlen); }

//! @copydoc SDL_wcstol()
inline long wcstol(const wchar_t* str, wchar_t** endp, int base) { return SDL_wcstol(str, endp, base); }

//! @copydoc SDL_strlen()
inline size_t strlen(const char* str) { return SDL_strlen(str); }

//! @copydoc SDL_strnlen()
inline size_t strnlen(const char* str, size_t maxlen) { return SDL_strnlen(str, maxlen); }

//! @copydoc SDL_strlcpy()
inline size_t strlcpy(char* dst, const char* src, size_t maxlen) { return SDL_strlcpy(dst, src, maxlen); }

//! @copydoc SDL_utf8strlcpy()
inline size_t utf8strlcpy(char* dst, const char* src, size_t dst_bytes) { return SDL_utf8strlcpy(dst, src, dst_bytes); }

//! @copydoc SDL_strlcat()
inline size_t strlcat(char* dst, const char* src, size_t maxlen) { return SDL_strlcat(dst, src, maxlen); }

//! @copydoc SDL_strdup()
inline char* strdup(const char* str) { return SDL_strdup(str); }

//! @copydoc SDL_strndup()
inline char* strndup(const char* str, size_t maxlen) { return SDL_strndup(str, maxlen); }

//! @copydoc SDL_strrev()
inline char* strrev(char* str) { return SDL_strrev(str); }

//! @copydoc SDL_strupr()
inline char* strupr(char* str) { return SDL_strupr(str); }

//! @copydoc SDL_strlwr()
inline char* strlwr(char* str) { return SDL_strlwr(str); }

//! @copydoc SDL_strchr()
inline char* strchr(const char* str, int c) { return SDL_strchr(str, c); }

//! @copydoc SDL_strrchr()
inline char* strrchr(const char* str, int c) { return SDL_strrchr(str, c); }

//! @copydoc SDL_strstr()
inline char* strstr(const char* haystack, const char* needle) { return SDL_strstr(haystack, needle); }

//! @copydoc SDL_strnstr()
inline char* strnstr(const char* haystack, const char* needle, size_t maxlen) { return SDL_strnstr(haystack, needle, maxlen); }

//! @copydoc SDL_strcasestr()
inline char* strcasestr(const char* haystack, const char* needle) { return SDL_strcasestr(haystack, needle); }

//! @copydoc SDL_strtok_r()
inline char* strtok_r(char* str, const char* delim, char** saveptr) { return SDL_strtok_r(str, delim, saveptr); }

//! @copydoc SDL_utf8strlen()
inline size_t utf8strlen(const char* str) { return SDL_utf8strlen(str); }

//! @copydoc SDL_utf8strnlen()
inline size_t utf8strnlen(const char* str, size_t bytes) { return SDL_utf8strnlen(str, bytes); }

//! @copydoc SDL_itoa()
inline char* itoa(int value, char* str, int radix) { return SDL_itoa(value, str, radix); }

//! @copydoc SDL_uitoa()
inline char* uitoa(unsigned int value, char* str, int radix) { return SDL_uitoa(value, str, radix); }

//! @copydoc SDL_ltoa()
inline char* ltoa(long value, char* str, int radix) { return SDL_ltoa(value, str, radix); }

//! @copydoc SDL_ultoa()
inline char* ultoa(unsigned long value, char* str, int radix) { return SDL_ultoa(value, str, radix); }

//! @copydoc SDL_lltoa()
inline char* lltoa(long long value, char* str, int radix) { return SDL_lltoa(value, str, radix); }

//! @copydoc SDL_ulltoa()
inline char* ulltoa(unsigned long long value, char* str, int radix) { return SDL_ulltoa(value, str, radix); }

//! @copydoc SDL_atoi()
inline int atoi(const char* str) { return SDL_atoi(str); }

//! @copydoc SDL_atof()
inline double atof(const char* str) { return SDL_atof(str); }

//! @copydoc SDL_strtol()
inline long strtol(const char* str, char** endp, int base) { return SDL_strtol(str, endp, base); }

//! @copydoc SDL_strtoul()
inline unsigned long strtoul(const char* str, char** endp, int base) { return SDL_strtoul(str, endp, base); }

//! @copydoc SDL_strtoll()
inline long long strtoll(const char* str, char** endp, int base) { return SDL_strtoll(str, endp, base); }

//! @copydoc SDL_strtoull()
inline unsigned long long strtoull(const char* str, char** endp, int base) { return SDL_strtoull(str, endp, base); }

//! @copydoc SDL_strtod()
inline double strtod(const char* str, char** endp) { return SDL_strtod(str, endp); }

//! @copydoc SDL_strcmp()
inline int strcmp(const char* str1, const char* str2) { return SDL_strcmp(str1, str2); }

//! @copydoc SDL_strncmp()
inline int strncmp(const char* str1, const char* str2, size_t maxlen) { return SDL_strncmp(str1, str2, maxlen); }

//! @copydoc SDL_strcasecmp()
inline int strcasecmp(const char* str1, const char* str2) { return SDL_strcasecmp(str1, str2); }

//! @copydoc SDL_strncasecmp()
inline int strncasecmp(const char* str1, const char* str2, size_t maxlen) { return SDL_strncasecmp(str1, str2, maxlen); }

//! @copydoc SDL_strpbrk()
inline char* strpbrk(const char* str, const char* breakset) { return SDL_strpbrk(str, breakset); }

//! @copydoc SDL_StepUTF8()
inline Uint32 StepUTF8(const char** pstr, size_t* pslen) { return SDL_StepUTF8(pstr, pslen); }

//! @copydoc SDL_StepBackUTF8()
inline Uint32 StepBackUTF8(const char* start, const char** pstr) { return SDL_StepBackUTF8(start, pstr); }

//! @copydoc SDL_UCS4ToUTF8()
inline char* UCS4ToUTF8(Uint32 codepoint, char* dst) { return SDL_UCS4ToUTF8(codepoint, dst); }

//! @copydoc SDL_vsscanf()
inline int vsscanf(const char* text, const char* fmt, va_list ap) { return SDL_vsscanf(text, fmt, ap); }

//! @copydoc SDL_vsnprintf()
inline int vsnprintf(char* text, size_t maxlen, const char* fmt, va_list ap) { return SDL_vsnprintf(text, maxlen, fmt, ap); }

//! @copydoc SDL_vswprintf()
inline int vswprintf(wchar_t* text, size_t maxlen, const wchar_t* fmt, va_list ap) { return SDL_vswprintf(text, maxlen, fmt, ap); }

//! @copydoc SDL_vasprintf()
inline int vasprintf(char** strp, const char* fmt, va_list ap) { return SDL_vasprintf(strp, fmt, ap); }

//! @copydoc SDL_srand()
inline void srand(Uint64 seed) {  SDL_srand(seed); }

//! @copydoc SDL_rand()
inline Sint32 rand(Sint32 n) { return SDL_rand(n); }

//! @copydoc SDL_randf()
inline float randf() { return SDL_randf(); }

//! @copydoc SDL_rand_bits()
inline Uint32 rand_bits() { return SDL_rand_bits(); }

//! @copydoc SDL_rand_r()
inline Sint32 rand_r(Uint64* state, Sint32 n) { return SDL_rand_r(state, n); }

//! @copydoc SDL_randf_r()
inline float randf_r(Uint64* state) { return SDL_randf_r(state); }

//! @copydoc SDL_rand_bits_r()
inline Uint32 rand_bits_r(Uint64* state) { return SDL_rand_bits_r(state); }

//! @copydoc SDL_acos()
inline double acos(double x) { return SDL_acos(x); }

//! @copydoc SDL_acosf()
inline float acosf(float x) { return SDL_acosf(x); }

//! @copydoc SDL_asin()
inline double asin(double x) { return SDL_asin(x); }

//! @copydoc SDL_asinf()
inline float asinf(float x) { return SDL_asinf(x); }

//! @copydoc SDL_atan()
inline double atan(double x) { return SDL_atan(x); }

//! @copydoc SDL_atanf()
inline float atanf(float x) { return SDL_atanf(x); }

//! @copydoc SDL_atan2()
inline double atan2(double y, double x) { return SDL_atan2(y, x); }

//! @copydoc SDL_atan2f()
inline float atan2f(float y, float x) { return SDL_atan2f(y, x); }

//! @copydoc SDL_ceil()
inline double ceil(double x) { return SDL_ceil(x); }

//! @copydoc SDL_ceilf()
inline float ceilf(float x) { return SDL_ceilf(x); }

//! @copydoc SDL_copysign()
inline double copysign(double x, double y) { return SDL_copysign(x, y); }

//! @copydoc SDL_copysignf()
inline float copysignf(float x, float y) { return SDL_copysignf(x, y); }

//! @copydoc SDL_cos()
inline double cos(double x) { return SDL_cos(x); }

//! @copydoc SDL_cosf()
inline float cosf(float x) { return SDL_cosf(x); }

//! @copydoc SDL_exp()
inline double exp(double x) { return SDL_exp(x); }

//! @copydoc SDL_expf()
inline float expf(float x) { return SDL_expf(x); }

//! @copydoc SDL_fabs()
inline double fabs(double x) { return SDL_fabs(x); }

//! @copydoc SDL_fabsf()
inline float fabsf(float x) { return SDL_fabsf(x); }

//! @copydoc SDL_floor()
inline double floor(double x) { return SDL_floor(x); }

//! @copydoc SDL_floorf()
inline float floorf(float x) { return SDL_floorf(x); }

//! @copydoc SDL_trunc()
inline double trunc(double x) { return SDL_trunc(x); }

//! @copydoc SDL_truncf()
inline float truncf(float x) { return SDL_truncf(x); }

//! @copydoc SDL_fmod()
inline double fmod(double x, double y) { return SDL_fmod(x, y); }

//! @copydoc SDL_fmodf()
inline float fmodf(float x, float y) { return SDL_fmodf(x, y); }

//! @copydoc SDL_isinf()
inline int isinf(double x) { return SDL_isinf(x); }

//! @copydoc SDL_isinff()
inline int isinff(float x) { return SDL_isinff(x); }

//! @copydoc SDL_isnan()
inline int isnan(double x) { return SDL_isnan(x); }

//! @copydoc SDL_isnanf()
inline int isnanf(float x) { return SDL_isnanf(x); }

//! @copydoc SDL_log()
inline double log(double x) { return SDL_log(x); }

//! @copydoc SDL_logf()
inline float logf(float x) { return SDL_logf(x); }

//! @copydoc SDL_log10()
inline double log10(double x) { return SDL_log10(x); }

//! @copydoc SDL_log10f()
inline float log10f(float x) { return SDL_log10f(x); }

//! @copydoc SDL_modf()
inline double modf(double x, double* y) { return SDL_modf(x, y); }

//! @copydoc SDL_modff()
inline float modff(float x, float* y) { return SDL_modff(x, y); }

//! @copydoc SDL_pow()
inline double pow(double x, double y) { return SDL_pow(x, y); }

//! @copydoc SDL_powf()
inline float powf(float x, float y) { return SDL_powf(x, y); }

//! @copydoc SDL_round()
inline double round(double x) { return SDL_round(x); }

//! @copydoc SDL_roundf()
inline float roundf(float x) { return SDL_roundf(x); }

//! @copydoc SDL_lround()
inline long lround(double x) { return SDL_lround(x); }

//! @copydoc SDL_lroundf()
inline long lroundf(float x) { return SDL_lroundf(x); }

//! @copydoc SDL_scalbn()
inline double scalbn(double x, int n) { return SDL_scalbn(x, n); }

//! @copydoc SDL_scalbnf()
inline float scalbnf(float x, int n) { return SDL_scalbnf(x, n); }

//! @copydoc SDL_sin()
inline double sin(double x) { return SDL_sin(x); }

//! @copydoc SDL_sinf()
inline float sinf(float x) { return SDL_sinf(x); }

//! @copydoc SDL_sqrt()
inline double sqrt(double x) { return SDL_sqrt(x); }

//! @copydoc SDL_sqrtf()
inline float sqrtf(float x) { return SDL_sqrtf(x); }

//! @copydoc SDL_tan()
inline double tan(double x) { return SDL_tan(x); }

//! @copydoc SDL_tanf()
inline float tanf(float x) { return SDL_tanf(x); }

//! @copydoc SDL_iconv_open()
inline SDL_iconv_t iconv_open(const char* tocode, const char* fromcode) { return SDL_iconv_open(tocode, fromcode); }

//! @copydoc SDL_iconv_close()
inline int iconv_close(SDL_iconv_t cd) { return SDL_iconv_close(cd); }

//! @copydoc SDL_iconv()
inline size_t iconv(SDL_iconv_t cd, const char** inbuf, size_t* inbytesleft, char** outbuf, size_t* outbytesleft) { return SDL_iconv(cd, inbuf, inbytesleft, outbuf, outbytesleft); }

//! @copydoc SDL_iconv_string()
inline char* iconv_string(const char* tocode, const char* fromcode, const char* inbuf, size_t inbytesleft) { return SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft); }

//! @copydoc SDL_size_mul_check_overflow()
inline bool size_mul_check_overflow(size_t a, size_t b, size_t* ret) { return SDL_size_mul_check_overflow(a, b, ret); }

//! @copydoc SDL_size_mul_check_overflow_builtin()
inline bool size_mul_check_overflow_builtin(size_t a, size_t b, size_t* ret) { return SDL_size_mul_check_overflow_builtin(a, b, ret); }

//! @copydoc SDL_size_add_check_overflow()
inline bool size_add_check_overflow(size_t a, size_t b, size_t* ret) { return SDL_size_add_check_overflow(a, b, ret); }

//! @copydoc SDL_size_add_check_overflow_builtin()
inline bool size_add_check_overflow_builtin(size_t a, size_t b, size_t* ret) { return SDL_size_add_check_overflow_builtin(a, b, ret); }

//! @copydoc SDL_ReportAssertion()
inline SDL_AssertState ReportAssertion(SDL_AssertData* data, const char* func, const char* file, int line) { return SDL_ReportAssertion(data, func, file, line); }

//! @copydoc SDL_SetAssertionHandler()
inline void SetAssertionHandler(SDL_AssertionHandler handler, void* userdata) {  SDL_SetAssertionHandler(handler, userdata); }

//! @copydoc SDL_GetDefaultAssertionHandler()
inline SDL_AssertionHandler GetDefaultAssertionHandler() { return SDL_GetDefaultAssertionHandler(); }

//! @copydoc SDL_GetAssertionHandler()
inline SDL_AssertionHandler GetAssertionHandler(void** puserdata) { return SDL_GetAssertionHandler(puserdata); }

//! @copydoc SDL_GetAssertionReport()
inline const SDL_AssertData* GetAssertionReport() { return SDL_GetAssertionReport(); }

//! @copydoc SDL_ResetAssertionReport()
inline void ResetAssertionReport() {  SDL_ResetAssertionReport(); }

//! @copydoc SDL_AsyncIOFromFile()
inline SDL_AsyncIO* AsyncIOFromFile(const char* file, const char* mode) { auto _ret = SDL_AsyncIOFromFile(file, mode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAsyncIOSize()
inline Sint64 GetAsyncIOSize(SDL_AsyncIO* asyncio) { auto _ret = SDL_GetAsyncIOSize(asyncio); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadAsyncIO()
inline bool ReadAsyncIO(SDL_AsyncIO* asyncio, void* ptr, Uint64 offset, Uint64 size, SDL_AsyncIOQueue* queue, void* userdata) { auto _ret = SDL_ReadAsyncIO(asyncio, ptr, offset, size, queue, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteAsyncIO()
inline bool WriteAsyncIO(SDL_AsyncIO* asyncio, void* ptr, Uint64 offset, Uint64 size, SDL_AsyncIOQueue* queue, void* userdata) { auto _ret = SDL_WriteAsyncIO(asyncio, ptr, offset, size, queue, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CloseAsyncIO()
inline bool CloseAsyncIO(SDL_AsyncIO* asyncio, bool flush, SDL_AsyncIOQueue* queue, void* userdata) { auto _ret = SDL_CloseAsyncIO(asyncio, flush, queue, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateAsyncIOQueue()
inline SDL_AsyncIOQueue* CreateAsyncIOQueue() { auto _ret = SDL_CreateAsyncIOQueue(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroyAsyncIOQueue()
inline void DestroyAsyncIOQueue(SDL_AsyncIOQueue* queue) {  SDL_DestroyAsyncIOQueue(queue); }

//! @copydoc SDL_GetAsyncIOResult()
inline bool GetAsyncIOResult(SDL_AsyncIOQueue* queue, SDL_AsyncIOOutcome* outcome) { return SDL_GetAsyncIOResult(queue, outcome); }

//! @copydoc SDL_WaitAsyncIOResult()
inline bool WaitAsyncIOResult(SDL_AsyncIOQueue* queue, SDL_AsyncIOOutcome* outcome, Sint32 timeoutMS) { return SDL_WaitAsyncIOResult(queue, outcome, timeoutMS); }

//! @copydoc SDL_SignalAsyncIOQueue()
inline void SignalAsyncIOQueue(SDL_AsyncIOQueue* queue) {  SDL_SignalAsyncIOQueue(queue); }

//! @copydoc SDL_LoadFileAsync()
inline bool LoadFileAsync(const char* file, SDL_AsyncIOQueue* queue, void* userdata) { auto _ret = SDL_LoadFileAsync(file, queue, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_TryLockSpinlock()
inline bool TryLockSpinlock(SDL_SpinLock* lock) { return SDL_TryLockSpinlock(lock); }

//! @copydoc SDL_LockSpinlock()
inline void LockSpinlock(SDL_SpinLock* lock) {  SDL_LockSpinlock(lock); }

//! @copydoc SDL_UnlockSpinlock()
inline void UnlockSpinlock(SDL_SpinLock* lock) {  SDL_UnlockSpinlock(lock); }

//! @copydoc SDL_MemoryBarrierReleaseFunction()
inline void MemoryBarrierReleaseFunction() {  SDL_MemoryBarrierReleaseFunction(); }

//! @copydoc SDL_MemoryBarrierAcquireFunction()
inline void MemoryBarrierAcquireFunction() {  SDL_MemoryBarrierAcquireFunction(); }

//! @copydoc SDL_CompareAndSwapAtomicInt()
inline bool CompareAndSwapAtomicInt(SDL_AtomicInt* a, int oldval, int newval) { return SDL_CompareAndSwapAtomicInt(a, oldval, newval); }

//! @copydoc SDL_SetAtomicInt()
inline int SetAtomicInt(SDL_AtomicInt* a, int v) { return SDL_SetAtomicInt(a, v); }

//! @copydoc SDL_GetAtomicInt()
inline int GetAtomicInt(SDL_AtomicInt* a) { return SDL_GetAtomicInt(a); }

//! @copydoc SDL_AddAtomicInt()
inline int AddAtomicInt(SDL_AtomicInt* a, int v) { return SDL_AddAtomicInt(a, v); }

//! @copydoc SDL_CompareAndSwapAtomicU32()
inline bool CompareAndSwapAtomicU32(SDL_AtomicU32* a, Uint32 oldval, Uint32 newval) { return SDL_CompareAndSwapAtomicU32(a, oldval, newval); }

//! @copydoc SDL_SetAtomicU32()
inline Uint32 SetAtomicU32(SDL_AtomicU32* a, Uint32 v) { return SDL_SetAtomicU32(a, v); }

//! @copydoc SDL_GetAtomicU32()
inline Uint32 GetAtomicU32(SDL_AtomicU32* a) { return SDL_GetAtomicU32(a); }

//! @copydoc SDL_CompareAndSwapAtomicPointer()
inline bool CompareAndSwapAtomicPointer(void** a, void* oldval, void* newval) { return SDL_CompareAndSwapAtomicPointer(a, oldval, newval); }

//! @copydoc SDL_SetAtomicPointer()
inline void* SetAtomicPointer(void** a, void* v) { return SDL_SetAtomicPointer(a, v); }

//! @copydoc SDL_GetAtomicPointer()
inline void* GetAtomicPointer(void** a) { return SDL_GetAtomicPointer(a); }

//! @copydoc SDL_Swap16()
inline Uint16 Swap16(Uint16 x) { return SDL_Swap16(x); }

//! @copydoc SDL_Swap32()
inline Uint32 Swap32(Uint32 x) { return SDL_Swap32(x); }

//! @copydoc SDL_Swap64()
inline Uint64 Swap64(Uint64 x) { return SDL_Swap64(x); }

//! @copydoc SDL_SwapFloat()
inline float SwapFloat(float x) { return SDL_SwapFloat(x); }

//! @copydoc SDL_SetErrorV()
inline bool SetErrorV(const char* fmt, va_list ap) { return SDL_SetErrorV(fmt, ap); }

//! @copydoc SDL_OutOfMemory()
inline bool OutOfMemory() { return SDL_OutOfMemory(); }

//! @copydoc SDL_GetError()
inline const char* GetError() { return SDL_GetError(); }

//! @copydoc SDL_ClearError()
inline bool ClearError() { return SDL_ClearError(); }

//! @copydoc SDL_GetGlobalProperties()
inline SDL_PropertiesID GetGlobalProperties() { auto _ret = SDL_GetGlobalProperties(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateProperties()
inline SDL_PropertiesID CreateProperties() { auto _ret = SDL_CreateProperties(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CopyProperties()
inline bool CopyProperties(SDL_PropertiesID src, SDL_PropertiesID dst) { auto _ret = SDL_CopyProperties(src, dst); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_LockProperties()
inline bool LockProperties(SDL_PropertiesID props) { auto _ret = SDL_LockProperties(props); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UnlockProperties()
inline void UnlockProperties(SDL_PropertiesID props) {  SDL_UnlockProperties(props); }

//! @copydoc SDL_SetPointerPropertyWithCleanup()
inline bool SetPointerPropertyWithCleanup(SDL_PropertiesID props, const char* name, void* value, SDL_CleanupPropertyCallback cleanup, void* userdata) { auto _ret = SDL_SetPointerPropertyWithCleanup(props, name, value, cleanup, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetPointerProperty()
inline bool SetPointerProperty(SDL_PropertiesID props, const char* name, void* value) { auto _ret = SDL_SetPointerProperty(props, name, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetStringProperty()
inline bool SetStringProperty(SDL_PropertiesID props, const char* name, const char* value) { auto _ret = SDL_SetStringProperty(props, name, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetNumberProperty()
inline bool SetNumberProperty(SDL_PropertiesID props, const char* name, Sint64 value) { auto _ret = SDL_SetNumberProperty(props, name, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetFloatProperty()
inline bool SetFloatProperty(SDL_PropertiesID props, const char* name, float value) { auto _ret = SDL_SetFloatProperty(props, name, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetBooleanProperty()
inline bool SetBooleanProperty(SDL_PropertiesID props, const char* name, bool value) { auto _ret = SDL_SetBooleanProperty(props, name, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_HasProperty()
inline bool HasProperty(SDL_PropertiesID props, const char* name) { return SDL_HasProperty(props, name); }

//! @copydoc SDL_GetPropertyType()
inline SDL_PropertyType GetPropertyType(SDL_PropertiesID props, const char* name) { return SDL_GetPropertyType(props, name); }

//! @copydoc SDL_GetPointerProperty()
inline void* GetPointerProperty(SDL_PropertiesID props, const char* name, void* default_value) { return SDL_GetPointerProperty(props, name, default_value); }

//! @copydoc SDL_GetStringProperty()
inline const char* GetStringProperty(SDL_PropertiesID props, const char* name, const char* default_value) { return SDL_GetStringProperty(props, name, default_value); }

//! @copydoc SDL_GetNumberProperty()
inline Sint64 GetNumberProperty(SDL_PropertiesID props, const char* name, Sint64 default_value) { return SDL_GetNumberProperty(props, name, default_value); }

//! @copydoc SDL_GetFloatProperty()
inline float GetFloatProperty(SDL_PropertiesID props, const char* name, float default_value) { return SDL_GetFloatProperty(props, name, default_value); }

//! @copydoc SDL_GetBooleanProperty()
inline bool GetBooleanProperty(SDL_PropertiesID props, const char* name, bool default_value) { return SDL_GetBooleanProperty(props, name, default_value); }

//! @copydoc SDL_ClearProperty()
inline bool ClearProperty(SDL_PropertiesID props, const char* name) { auto _ret = SDL_ClearProperty(props, name); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_EnumerateProperties()
inline bool EnumerateProperties(SDL_PropertiesID props, SDL_EnumeratePropertiesCallback callback, void* userdata) { auto _ret = SDL_EnumerateProperties(props, callback, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroyProperties()
inline void DestroyProperties(SDL_PropertiesID props) {  SDL_DestroyProperties(props); }

//! @copydoc SDL_CreateThreadRuntime()
inline SDL_Thread* CreateThreadRuntime(SDL_ThreadFunction fn, const char* name, void* data, SDL_FunctionPointer pfnBeginThread, SDL_FunctionPointer pfnEndThread) { auto _ret = SDL_CreateThreadRuntime(fn, name, data, pfnBeginThread, pfnEndThread); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateThreadWithPropertiesRuntime()
inline SDL_Thread* CreateThreadWithPropertiesRuntime(SDL_PropertiesID props, SDL_FunctionPointer pfnBeginThread, SDL_FunctionPointer pfnEndThread) { auto _ret = SDL_CreateThreadWithPropertiesRuntime(props, pfnBeginThread, pfnEndThread); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetThreadName()
inline const char* GetThreadName(SDL_Thread* thread) { return SDL_GetThreadName(thread); }

//! @copydoc SDL_GetCurrentThreadID()
inline SDL_ThreadID GetCurrentThreadID() { return SDL_GetCurrentThreadID(); }

//! @copydoc SDL_GetThreadID()
inline SDL_ThreadID GetThreadID(SDL_Thread* thread) { return SDL_GetThreadID(thread); }

//! @copydoc SDL_SetCurrentThreadPriority()
inline bool SetCurrentThreadPriority(SDL_ThreadPriority priority) { auto _ret = SDL_SetCurrentThreadPriority(priority); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WaitThread()
inline void WaitThread(SDL_Thread* thread, int* status) {  SDL_WaitThread(thread, status); }

//! @copydoc SDL_GetThreadState()
inline SDL_ThreadState GetThreadState(SDL_Thread* thread) { return SDL_GetThreadState(thread); }

//! @copydoc SDL_DetachThread()
inline void DetachThread(SDL_Thread* thread) {  SDL_DetachThread(thread); }

//! @copydoc SDL_GetTLS()
inline void* GetTLS(SDL_TLSID* id) { auto _ret = SDL_GetTLS(id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetTLS()
inline bool SetTLS(SDL_TLSID* id, const void* value, SDL_TLSDestructorCallback destructor) { auto _ret = SDL_SetTLS(id, value, destructor); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CleanupTLS()
inline void CleanupTLS() {  SDL_CleanupTLS(); }

//! @copydoc SDL_CreateMutex()
inline SDL_Mutex* CreateMutex() { auto _ret = SDL_CreateMutex(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_LockMutex()
inline void LockMutex(SDL_Mutex* mutex) {  SDL_LockMutex(mutex); }

//! @copydoc SDL_TryLockMutex()
inline bool TryLockMutex(SDL_Mutex* mutex) { return SDL_TryLockMutex(mutex); }

//! @copydoc SDL_UnlockMutex()
inline void UnlockMutex(SDL_Mutex* mutex) {  SDL_UnlockMutex(mutex); }

//! @copydoc SDL_DestroyMutex()
inline void DestroyMutex(SDL_Mutex* mutex) {  SDL_DestroyMutex(mutex); }

//! @copydoc SDL_CreateRWLock()
inline SDL_RWLock* CreateRWLock() { auto _ret = SDL_CreateRWLock(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_LockRWLockForReading()
inline void LockRWLockForReading(SDL_RWLock* rwlock) {  SDL_LockRWLockForReading(rwlock); }

//! @copydoc SDL_LockRWLockForWriting()
inline void LockRWLockForWriting(SDL_RWLock* rwlock) {  SDL_LockRWLockForWriting(rwlock); }

//! @copydoc SDL_TryLockRWLockForReading()
inline bool TryLockRWLockForReading(SDL_RWLock* rwlock) { return SDL_TryLockRWLockForReading(rwlock); }

//! @copydoc SDL_TryLockRWLockForWriting()
inline bool TryLockRWLockForWriting(SDL_RWLock* rwlock) { return SDL_TryLockRWLockForWriting(rwlock); }

//! @copydoc SDL_UnlockRWLock()
inline void UnlockRWLock(SDL_RWLock* rwlock) {  SDL_UnlockRWLock(rwlock); }

//! @copydoc SDL_DestroyRWLock()
inline void DestroyRWLock(SDL_RWLock* rwlock) {  SDL_DestroyRWLock(rwlock); }

//! @copydoc SDL_CreateSemaphore()
inline SDL_Semaphore* CreateSemaphore(Uint32 initial_value) { auto _ret = SDL_CreateSemaphore(initial_value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroySemaphore()
inline void DestroySemaphore(SDL_Semaphore* sem) {  SDL_DestroySemaphore(sem); }

//! @copydoc SDL_WaitSemaphore()
inline void WaitSemaphore(SDL_Semaphore* sem) {  SDL_WaitSemaphore(sem); }

//! @copydoc SDL_TryWaitSemaphore()
inline bool TryWaitSemaphore(SDL_Semaphore* sem) { return SDL_TryWaitSemaphore(sem); }

//! @copydoc SDL_WaitSemaphoreTimeout()
inline bool WaitSemaphoreTimeout(SDL_Semaphore* sem, Sint32 timeoutMS) { return SDL_WaitSemaphoreTimeout(sem, timeoutMS); }

//! @copydoc SDL_SignalSemaphore()
inline void SignalSemaphore(SDL_Semaphore* sem) {  SDL_SignalSemaphore(sem); }

//! @copydoc SDL_GetSemaphoreValue()
inline Uint32 GetSemaphoreValue(SDL_Semaphore* sem) { return SDL_GetSemaphoreValue(sem); }

//! @copydoc SDL_CreateCondition()
inline SDL_Condition* CreateCondition() { auto _ret = SDL_CreateCondition(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroyCondition()
inline void DestroyCondition(SDL_Condition* cond) {  SDL_DestroyCondition(cond); }

//! @copydoc SDL_SignalCondition()
inline void SignalCondition(SDL_Condition* cond) {  SDL_SignalCondition(cond); }

//! @copydoc SDL_BroadcastCondition()
inline void BroadcastCondition(SDL_Condition* cond) {  SDL_BroadcastCondition(cond); }

//! @copydoc SDL_WaitCondition()
inline void WaitCondition(SDL_Condition* cond, SDL_Mutex* mutex) {  SDL_WaitCondition(cond, mutex); }

//! @copydoc SDL_WaitConditionTimeout()
inline bool WaitConditionTimeout(SDL_Condition* cond, SDL_Mutex* mutex, Sint32 timeoutMS) { return SDL_WaitConditionTimeout(cond, mutex, timeoutMS); }

//! @copydoc SDL_ShouldInit()
inline bool ShouldInit(SDL_InitState* state) { return SDL_ShouldInit(state); }

//! @copydoc SDL_ShouldQuit()
inline bool ShouldQuit(SDL_InitState* state) { return SDL_ShouldQuit(state); }

//! @copydoc SDL_SetInitialized()
inline void SetInitialized(SDL_InitState* state, bool initialized) {  SDL_SetInitialized(state, initialized); }

//! @copydoc SDL_IOFromFile()
inline SDL_IOStream* IOFromFile(const char* file, const char* mode) { auto _ret = SDL_IOFromFile(file, mode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_IOFromMem()
inline SDL_IOStream* IOFromMem(void* mem, size_t size) { auto _ret = SDL_IOFromMem(mem, size); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_IOFromConstMem()
inline SDL_IOStream* IOFromConstMem(const void* mem, size_t size) { auto _ret = SDL_IOFromConstMem(mem, size); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_IOFromDynamicMem()
inline SDL_IOStream* IOFromDynamicMem() { auto _ret = SDL_IOFromDynamicMem(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_OpenIO()
inline SDL_IOStream* OpenIO(const SDL_IOStreamInterface* iface, void* userdata) { auto _ret = SDL_OpenIO(iface, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CloseIO()
inline bool CloseIO(SDL_IOStream* context) { auto _ret = SDL_CloseIO(context); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetIOProperties()
inline SDL_PropertiesID GetIOProperties(SDL_IOStream* context) { auto _ret = SDL_GetIOProperties(context); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetIOStatus()
inline SDL_IOStatus GetIOStatus(SDL_IOStream* context) { return SDL_GetIOStatus(context); }

//! @copydoc SDL_GetIOSize()
inline Sint64 GetIOSize(SDL_IOStream* context) { auto _ret = SDL_GetIOSize(context); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SeekIO()
inline Sint64 SeekIO(SDL_IOStream* context, Sint64 offset, SDL_IOWhence whence) { auto _ret = SDL_SeekIO(context, offset, whence); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_TellIO()
inline Sint64 TellIO(SDL_IOStream* context) { return SDL_TellIO(context); }

//! @copydoc SDL_ReadIO()
inline size_t ReadIO(SDL_IOStream* context, void* ptr, size_t size) { auto _ret = SDL_ReadIO(context, ptr, size); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteIO()
inline size_t WriteIO(SDL_IOStream* context, const void* ptr, size_t size) { auto _ret = SDL_WriteIO(context, ptr, size); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_IOvprintf()
inline size_t IOvprintf(SDL_IOStream* context, const char* fmt, va_list ap) { auto _ret = SDL_IOvprintf(context, fmt, ap); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_FlushIO()
inline bool FlushIO(SDL_IOStream* context) { auto _ret = SDL_FlushIO(context); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_LoadFile_IO()
inline void* LoadFile_IO(SDL_IOStream* src, size_t* datasize, bool closeio) { auto _ret = SDL_LoadFile_IO(src, datasize, closeio); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_LoadFile()
inline void* LoadFile(const char* file, size_t* datasize) { auto _ret = SDL_LoadFile(file, datasize); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SaveFile_IO()
inline bool SaveFile_IO(SDL_IOStream* src, const void* data, size_t datasize, bool closeio) { auto _ret = SDL_SaveFile_IO(src, data, datasize, closeio); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SaveFile()
inline bool SaveFile(const char* file, const void* data, size_t datasize) { auto _ret = SDL_SaveFile(file, data, datasize); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadU8()
inline bool ReadU8(SDL_IOStream* src, Uint8* value) { auto _ret = SDL_ReadU8(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadS8()
inline bool ReadS8(SDL_IOStream* src, Sint8* value) { auto _ret = SDL_ReadS8(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadU16LE()
inline bool ReadU16LE(SDL_IOStream* src, Uint16* value) { auto _ret = SDL_ReadU16LE(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadS16LE()
inline bool ReadS16LE(SDL_IOStream* src, Sint16* value) { auto _ret = SDL_ReadS16LE(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadU16BE()
inline bool ReadU16BE(SDL_IOStream* src, Uint16* value) { auto _ret = SDL_ReadU16BE(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadS16BE()
inline bool ReadS16BE(SDL_IOStream* src, Sint16* value) { auto _ret = SDL_ReadS16BE(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadU32LE()
inline bool ReadU32LE(SDL_IOStream* src, Uint32* value) { auto _ret = SDL_ReadU32LE(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadS32LE()
inline bool ReadS32LE(SDL_IOStream* src, Sint32* value) { auto _ret = SDL_ReadS32LE(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadU32BE()
inline bool ReadU32BE(SDL_IOStream* src, Uint32* value) { auto _ret = SDL_ReadU32BE(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadS32BE()
inline bool ReadS32BE(SDL_IOStream* src, Sint32* value) { auto _ret = SDL_ReadS32BE(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadU64LE()
inline bool ReadU64LE(SDL_IOStream* src, Uint64* value) { auto _ret = SDL_ReadU64LE(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadS64LE()
inline bool ReadS64LE(SDL_IOStream* src, Sint64* value) { auto _ret = SDL_ReadS64LE(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadU64BE()
inline bool ReadU64BE(SDL_IOStream* src, Uint64* value) { auto _ret = SDL_ReadU64BE(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadS64BE()
inline bool ReadS64BE(SDL_IOStream* src, Sint64* value) { auto _ret = SDL_ReadS64BE(src, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteU8()
inline bool WriteU8(SDL_IOStream* dst, Uint8 value) { auto _ret = SDL_WriteU8(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteS8()
inline bool WriteS8(SDL_IOStream* dst, Sint8 value) { auto _ret = SDL_WriteS8(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteU16LE()
inline bool WriteU16LE(SDL_IOStream* dst, Uint16 value) { auto _ret = SDL_WriteU16LE(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteS16LE()
inline bool WriteS16LE(SDL_IOStream* dst, Sint16 value) { auto _ret = SDL_WriteS16LE(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteU16BE()
inline bool WriteU16BE(SDL_IOStream* dst, Uint16 value) { auto _ret = SDL_WriteU16BE(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteS16BE()
inline bool WriteS16BE(SDL_IOStream* dst, Sint16 value) { auto _ret = SDL_WriteS16BE(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteU32LE()
inline bool WriteU32LE(SDL_IOStream* dst, Uint32 value) { auto _ret = SDL_WriteU32LE(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteS32LE()
inline bool WriteS32LE(SDL_IOStream* dst, Sint32 value) { auto _ret = SDL_WriteS32LE(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteU32BE()
inline bool WriteU32BE(SDL_IOStream* dst, Uint32 value) { auto _ret = SDL_WriteU32BE(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteS32BE()
inline bool WriteS32BE(SDL_IOStream* dst, Sint32 value) { auto _ret = SDL_WriteS32BE(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteU64LE()
inline bool WriteU64LE(SDL_IOStream* dst, Uint64 value) { auto _ret = SDL_WriteU64LE(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteS64LE()
inline bool WriteS64LE(SDL_IOStream* dst, Sint64 value) { auto _ret = SDL_WriteS64LE(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteU64BE()
inline bool WriteU64BE(SDL_IOStream* dst, Uint64 value) { auto _ret = SDL_WriteU64BE(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteS64BE()
inline bool WriteS64BE(SDL_IOStream* dst, Sint64 value) { auto _ret = SDL_WriteS64BE(dst, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetNumAudioDrivers()
inline int GetNumAudioDrivers() { return SDL_GetNumAudioDrivers(); }

//! @copydoc SDL_GetAudioDriver()
inline const char* GetAudioDriver(int index) { return SDL_GetAudioDriver(index); }

//! @copydoc SDL_GetCurrentAudioDriver()
inline const char* GetCurrentAudioDriver() { return SDL_GetCurrentAudioDriver(); }

//! @copydoc SDL_GetAudioPlaybackDevices()
inline SDL_AudioDeviceID* GetAudioPlaybackDevices(int* count) { auto _ret = SDL_GetAudioPlaybackDevices(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAudioRecordingDevices()
inline SDL_AudioDeviceID* GetAudioRecordingDevices(int* count) { auto _ret = SDL_GetAudioRecordingDevices(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAudioDeviceName()
inline const char* GetAudioDeviceName(SDL_AudioDeviceID devid) { auto _ret = SDL_GetAudioDeviceName(devid); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAudioDeviceFormat()
inline bool GetAudioDeviceFormat(SDL_AudioDeviceID devid, SDL_AudioSpec* spec, int* sample_frames) { auto _ret = SDL_GetAudioDeviceFormat(devid, spec, sample_frames); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAudioDeviceChannelMap()
inline int* GetAudioDeviceChannelMap(SDL_AudioDeviceID devid, int* count) { return SDL_GetAudioDeviceChannelMap(devid, count); }

//! @copydoc SDL_OpenAudioDevice()
inline SDL_AudioDeviceID OpenAudioDevice(SDL_AudioDeviceID devid, const SDL_AudioSpec* spec) { auto _ret = SDL_OpenAudioDevice(devid, spec); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_IsAudioDevicePhysical()
inline bool IsAudioDevicePhysical(SDL_AudioDeviceID devid) { return SDL_IsAudioDevicePhysical(devid); }

//! @copydoc SDL_IsAudioDevicePlayback()
inline bool IsAudioDevicePlayback(SDL_AudioDeviceID devid) { return SDL_IsAudioDevicePlayback(devid); }

//! @copydoc SDL_PauseAudioDevice()
inline bool PauseAudioDevice(SDL_AudioDeviceID dev) { auto _ret = SDL_PauseAudioDevice(dev); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ResumeAudioDevice()
inline bool ResumeAudioDevice(SDL_AudioDeviceID dev) { auto _ret = SDL_ResumeAudioDevice(dev); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_AudioDevicePaused()
inline bool AudioDevicePaused(SDL_AudioDeviceID dev) { return SDL_AudioDevicePaused(dev); }

//! @copydoc SDL_GetAudioDeviceGain()
inline float GetAudioDeviceGain(SDL_AudioDeviceID devid) { auto _ret = SDL_GetAudioDeviceGain(devid); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetAudioDeviceGain()
inline bool SetAudioDeviceGain(SDL_AudioDeviceID devid, float gain) { auto _ret = SDL_SetAudioDeviceGain(devid, gain); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CloseAudioDevice()
inline void CloseAudioDevice(SDL_AudioDeviceID devid) {  SDL_CloseAudioDevice(devid); }

//! @copydoc SDL_BindAudioStreams()
inline bool BindAudioStreams(SDL_AudioDeviceID devid, SDL_AudioStream** streams, int num_streams) { auto _ret = SDL_BindAudioStreams(devid, streams, num_streams); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_BindAudioStream()
inline bool BindAudioStream(SDL_AudioDeviceID devid, SDL_AudioStream* stream) { auto _ret = SDL_BindAudioStream(devid, stream); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UnbindAudioStreams()
inline void UnbindAudioStreams(SDL_AudioStream** streams, int num_streams) {  SDL_UnbindAudioStreams(streams, num_streams); }

//! @copydoc SDL_UnbindAudioStream()
inline void UnbindAudioStream(SDL_AudioStream* stream) {  SDL_UnbindAudioStream(stream); }

//! @copydoc SDL_GetAudioStreamDevice()
inline SDL_AudioDeviceID GetAudioStreamDevice(SDL_AudioStream* stream) { return SDL_GetAudioStreamDevice(stream); }

//! @copydoc SDL_CreateAudioStream()
inline SDL_AudioStream* CreateAudioStream(const SDL_AudioSpec* src_spec, const SDL_AudioSpec* dst_spec) { auto _ret = SDL_CreateAudioStream(src_spec, dst_spec); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAudioStreamProperties()
inline SDL_PropertiesID GetAudioStreamProperties(SDL_AudioStream* stream) { auto _ret = SDL_GetAudioStreamProperties(stream); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAudioStreamFormat()
inline bool GetAudioStreamFormat(SDL_AudioStream* stream, SDL_AudioSpec* src_spec, SDL_AudioSpec* dst_spec) { auto _ret = SDL_GetAudioStreamFormat(stream, src_spec, dst_spec); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetAudioStreamFormat()
inline bool SetAudioStreamFormat(SDL_AudioStream* stream, const SDL_AudioSpec* src_spec, const SDL_AudioSpec* dst_spec) { auto _ret = SDL_SetAudioStreamFormat(stream, src_spec, dst_spec); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAudioStreamFrequencyRatio()
inline float GetAudioStreamFrequencyRatio(SDL_AudioStream* stream) { auto _ret = SDL_GetAudioStreamFrequencyRatio(stream); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetAudioStreamFrequencyRatio()
inline bool SetAudioStreamFrequencyRatio(SDL_AudioStream* stream, float ratio) { auto _ret = SDL_SetAudioStreamFrequencyRatio(stream, ratio); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAudioStreamGain()
inline float GetAudioStreamGain(SDL_AudioStream* stream) { auto _ret = SDL_GetAudioStreamGain(stream); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetAudioStreamGain()
inline bool SetAudioStreamGain(SDL_AudioStream* stream, float gain) { auto _ret = SDL_SetAudioStreamGain(stream, gain); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAudioStreamInputChannelMap()
inline int* GetAudioStreamInputChannelMap(SDL_AudioStream* stream, int* count) { return SDL_GetAudioStreamInputChannelMap(stream, count); }

//! @copydoc SDL_GetAudioStreamOutputChannelMap()
inline int* GetAudioStreamOutputChannelMap(SDL_AudioStream* stream, int* count) { return SDL_GetAudioStreamOutputChannelMap(stream, count); }

//! @copydoc SDL_SetAudioStreamInputChannelMap()
inline bool SetAudioStreamInputChannelMap(SDL_AudioStream* stream, const int* chmap, int count) { auto _ret = SDL_SetAudioStreamInputChannelMap(stream, chmap, count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetAudioStreamOutputChannelMap()
inline bool SetAudioStreamOutputChannelMap(SDL_AudioStream* stream, const int* chmap, int count) { auto _ret = SDL_SetAudioStreamOutputChannelMap(stream, chmap, count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_PutAudioStreamData()
inline bool PutAudioStreamData(SDL_AudioStream* stream, const void* buf, int len) { auto _ret = SDL_PutAudioStreamData(stream, buf, len); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAudioStreamData()
inline int GetAudioStreamData(SDL_AudioStream* stream, void* buf, int len) { auto _ret = SDL_GetAudioStreamData(stream, buf, len); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAudioStreamAvailable()
inline int GetAudioStreamAvailable(SDL_AudioStream* stream) { auto _ret = SDL_GetAudioStreamAvailable(stream); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAudioStreamQueued()
inline int GetAudioStreamQueued(SDL_AudioStream* stream) { auto _ret = SDL_GetAudioStreamQueued(stream); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_FlushAudioStream()
inline bool FlushAudioStream(SDL_AudioStream* stream) { auto _ret = SDL_FlushAudioStream(stream); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ClearAudioStream()
inline bool ClearAudioStream(SDL_AudioStream* stream) { auto _ret = SDL_ClearAudioStream(stream); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_PauseAudioStreamDevice()
inline bool PauseAudioStreamDevice(SDL_AudioStream* stream) { auto _ret = SDL_PauseAudioStreamDevice(stream); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ResumeAudioStreamDevice()
inline bool ResumeAudioStreamDevice(SDL_AudioStream* stream) { auto _ret = SDL_ResumeAudioStreamDevice(stream); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_AudioStreamDevicePaused()
inline bool AudioStreamDevicePaused(SDL_AudioStream* stream) { return SDL_AudioStreamDevicePaused(stream); }

//! @copydoc SDL_LockAudioStream()
inline bool LockAudioStream(SDL_AudioStream* stream) { auto _ret = SDL_LockAudioStream(stream); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UnlockAudioStream()
inline bool UnlockAudioStream(SDL_AudioStream* stream) { auto _ret = SDL_UnlockAudioStream(stream); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetAudioStreamGetCallback()
inline bool SetAudioStreamGetCallback(SDL_AudioStream* stream, SDL_AudioStreamCallback callback, void* userdata) { auto _ret = SDL_SetAudioStreamGetCallback(stream, callback, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetAudioStreamPutCallback()
inline bool SetAudioStreamPutCallback(SDL_AudioStream* stream, SDL_AudioStreamCallback callback, void* userdata) { auto _ret = SDL_SetAudioStreamPutCallback(stream, callback, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroyAudioStream()
inline void DestroyAudioStream(SDL_AudioStream* stream) {  SDL_DestroyAudioStream(stream); }

//! @copydoc SDL_OpenAudioDeviceStream()
inline SDL_AudioStream* OpenAudioDeviceStream(SDL_AudioDeviceID devid, const SDL_AudioSpec* spec, SDL_AudioStreamCallback callback, void* userdata) { auto _ret = SDL_OpenAudioDeviceStream(devid, spec, callback, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetAudioPostmixCallback()
inline bool SetAudioPostmixCallback(SDL_AudioDeviceID devid, SDL_AudioPostmixCallback callback, void* userdata) { auto _ret = SDL_SetAudioPostmixCallback(devid, callback, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_LoadWAV_IO()
inline bool LoadWAV_IO(SDL_IOStream* src, bool closeio, SDL_AudioSpec* spec, Uint8** audio_buf, Uint32* audio_len) { auto _ret = SDL_LoadWAV_IO(src, closeio, spec, audio_buf, audio_len); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_LoadWAV()
inline bool LoadWAV(const char* path, SDL_AudioSpec* spec, Uint8** audio_buf, Uint32* audio_len) { auto _ret = SDL_LoadWAV(path, spec, audio_buf, audio_len); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_MixAudio()
inline bool MixAudio(Uint8* dst, const Uint8* src, SDL_AudioFormat format, Uint32 len, float volume) { auto _ret = SDL_MixAudio(dst, src, format, len, volume); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ConvertAudioSamples()
inline bool ConvertAudioSamples(const SDL_AudioSpec* src_spec, const Uint8* src_data, int src_len, const SDL_AudioSpec* dst_spec, Uint8** dst_data, int* dst_len) { auto _ret = SDL_ConvertAudioSamples(src_spec, src_data, src_len, dst_spec, dst_data, dst_len); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAudioFormatName()
inline const char* GetAudioFormatName(SDL_AudioFormat format) { return SDL_GetAudioFormatName(format); }

//! @copydoc SDL_GetSilenceValueForFormat()
inline int GetSilenceValueForFormat(SDL_AudioFormat format) { return SDL_GetSilenceValueForFormat(format); }

//! @copydoc SDL_MostSignificantBitIndex32()
inline int MostSignificantBitIndex32(Uint32 x) { return SDL_MostSignificantBitIndex32(x); }

//! @copydoc SDL_HasExactlyOneBitSet32()
inline bool HasExactlyOneBitSet32(Uint32 x) { return SDL_HasExactlyOneBitSet32(x); }

//! @copydoc SDL_ComposeCustomBlendMode()
inline SDL_BlendMode ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation) { return SDL_ComposeCustomBlendMode(srcColorFactor, dstColorFactor, colorOperation, srcAlphaFactor, dstAlphaFactor, alphaOperation); }

//! @copydoc SDL_GetPixelFormatName()
inline const char* GetPixelFormatName(SDL_PixelFormat format) { return SDL_GetPixelFormatName(format); }

//! @copydoc SDL_GetMasksForPixelFormat()
inline bool GetMasksForPixelFormat(SDL_PixelFormat format, int* bpp, Uint32* Rmask, Uint32* Gmask, Uint32* Bmask, Uint32* Amask) { auto _ret = SDL_GetMasksForPixelFormat(format, bpp, Rmask, Gmask, Bmask, Amask); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetPixelFormatForMasks()
inline SDL_PixelFormat GetPixelFormatForMasks(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask) { return SDL_GetPixelFormatForMasks(bpp, Rmask, Gmask, Bmask, Amask); }

//! @copydoc SDL_GetPixelFormatDetails()
inline const SDL_PixelFormatDetails* GetPixelFormatDetails(SDL_PixelFormat format) { auto _ret = SDL_GetPixelFormatDetails(format); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreatePalette()
inline SDL_Palette* CreatePalette(int ncolors) { auto _ret = SDL_CreatePalette(ncolors); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetPaletteColors()
inline bool SetPaletteColors(SDL_Palette* palette, const SDL_Color* colors, int firstcolor, int ncolors) { auto _ret = SDL_SetPaletteColors(palette, colors, firstcolor, ncolors); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroyPalette()
inline void DestroyPalette(SDL_Palette* palette) {  SDL_DestroyPalette(palette); }

//! @copydoc SDL_MapRGB()
inline Uint32 MapRGB(const SDL_PixelFormatDetails* format, const SDL_Palette* palette, Uint8 r, Uint8 g, Uint8 b) { return SDL_MapRGB(format, palette, r, g, b); }

//! @copydoc SDL_MapRGBA()
inline Uint32 MapRGBA(const SDL_PixelFormatDetails* format, const SDL_Palette* palette, Uint8 r, Uint8 g, Uint8 b, Uint8 a) { return SDL_MapRGBA(format, palette, r, g, b, a); }

//! @copydoc SDL_GetRGB()
inline void GetRGB(Uint32 pixel, const SDL_PixelFormatDetails* format, const SDL_Palette* palette, Uint8* r, Uint8* g, Uint8* b) {  SDL_GetRGB(pixel, format, palette, r, g, b); }

//! @copydoc SDL_GetRGBA()
inline void GetRGBA(Uint32 pixel, const SDL_PixelFormatDetails* format, const SDL_Palette* palette, Uint8* r, Uint8* g, Uint8* b, Uint8* a) {  SDL_GetRGBA(pixel, format, palette, r, g, b, a); }

//! @copydoc SDL_RectToFRect()
inline void RectToFRect(const SDL_Rect* rect, SDL_FRect* frect) {  SDL_RectToFRect(rect, frect); }

//! @copydoc SDL_PointInRect()
inline bool PointInRect(const SDL_Point* p, const SDL_Rect* r) { return SDL_PointInRect(p, r); }

//! @copydoc SDL_RectEmpty()
inline bool RectEmpty(const SDL_Rect* r) { return SDL_RectEmpty(r); }

//! @copydoc SDL_RectsEqual()
inline bool RectsEqual(const SDL_Rect* a, const SDL_Rect* b) { return SDL_RectsEqual(a, b); }

//! @copydoc SDL_HasRectIntersection()
inline bool HasRectIntersection(const SDL_Rect* A, const SDL_Rect* B) { return SDL_HasRectIntersection(A, B); }

//! @copydoc SDL_GetRectIntersection()
inline bool GetRectIntersection(const SDL_Rect* A, const SDL_Rect* B, SDL_Rect* result) { return SDL_GetRectIntersection(A, B, result); }

//! @copydoc SDL_GetRectUnion()
inline bool GetRectUnion(const SDL_Rect* A, const SDL_Rect* B, SDL_Rect* result) { auto _ret = SDL_GetRectUnion(A, B, result); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRectEnclosingPoints()
inline bool GetRectEnclosingPoints(const SDL_Point* points, int count, const SDL_Rect* clip, SDL_Rect* result) { return SDL_GetRectEnclosingPoints(points, count, clip, result); }

//! @copydoc SDL_GetRectAndLineIntersection()
inline bool GetRectAndLineIntersection(const SDL_Rect* rect, int* X1, int* Y1, int* X2, int* Y2) { return SDL_GetRectAndLineIntersection(rect, X1, Y1, X2, Y2); }

//! @copydoc SDL_PointInRectFloat()
inline bool PointInRectFloat(const SDL_FPoint* p, const SDL_FRect* r) { return SDL_PointInRectFloat(p, r); }

//! @copydoc SDL_RectEmptyFloat()
inline bool RectEmptyFloat(const SDL_FRect* r) { return SDL_RectEmptyFloat(r); }

//! @copydoc SDL_RectsEqualEpsilon()
inline bool RectsEqualEpsilon(const SDL_FRect* a, const SDL_FRect* b, const float epsilon) { return SDL_RectsEqualEpsilon(a, b, epsilon); }

//! @copydoc SDL_RectsEqualFloat()
inline bool RectsEqualFloat(const SDL_FRect* a, const SDL_FRect* b) { return SDL_RectsEqualFloat(a, b); }

//! @copydoc SDL_HasRectIntersectionFloat()
inline bool HasRectIntersectionFloat(const SDL_FRect* A, const SDL_FRect* B) { return SDL_HasRectIntersectionFloat(A, B); }

//! @copydoc SDL_GetRectIntersectionFloat()
inline bool GetRectIntersectionFloat(const SDL_FRect* A, const SDL_FRect* B, SDL_FRect* result) { return SDL_GetRectIntersectionFloat(A, B, result); }

//! @copydoc SDL_GetRectUnionFloat()
inline bool GetRectUnionFloat(const SDL_FRect* A, const SDL_FRect* B, SDL_FRect* result) { auto _ret = SDL_GetRectUnionFloat(A, B, result); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRectEnclosingPointsFloat()
inline bool GetRectEnclosingPointsFloat(const SDL_FPoint* points, int count, const SDL_FRect* clip, SDL_FRect* result) { return SDL_GetRectEnclosingPointsFloat(points, count, clip, result); }

//! @copydoc SDL_GetRectAndLineIntersectionFloat()
inline bool GetRectAndLineIntersectionFloat(const SDL_FRect* rect, float* X1, float* Y1, float* X2, float* Y2) { return SDL_GetRectAndLineIntersectionFloat(rect, X1, Y1, X2, Y2); }

//! @copydoc SDL_CreateSurface()
inline SDL_Surface* CreateSurface(int width, int height, SDL_PixelFormat format) { auto _ret = SDL_CreateSurface(width, height, format); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateSurfaceFrom()
inline SDL_Surface* CreateSurfaceFrom(int width, int height, SDL_PixelFormat format, void* pixels, int pitch) { auto _ret = SDL_CreateSurfaceFrom(width, height, format, pixels, pitch); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroySurface()
inline void DestroySurface(SDL_Surface* surface) {  SDL_DestroySurface(surface); }

//! @copydoc SDL_GetSurfaceProperties()
inline SDL_PropertiesID GetSurfaceProperties(SDL_Surface* surface) { auto _ret = SDL_GetSurfaceProperties(surface); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetSurfaceColorspace()
inline bool SetSurfaceColorspace(SDL_Surface* surface, SDL_Colorspace colorspace) { auto _ret = SDL_SetSurfaceColorspace(surface, colorspace); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetSurfaceColorspace()
inline SDL_Colorspace GetSurfaceColorspace(SDL_Surface* surface) { return SDL_GetSurfaceColorspace(surface); }

//! @copydoc SDL_CreateSurfacePalette()
inline SDL_Palette* CreateSurfacePalette(SDL_Surface* surface) { auto _ret = SDL_CreateSurfacePalette(surface); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetSurfacePalette()
inline bool SetSurfacePalette(SDL_Surface* surface, SDL_Palette* palette) { auto _ret = SDL_SetSurfacePalette(surface, palette); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetSurfacePalette()
inline SDL_Palette* GetSurfacePalette(SDL_Surface* surface) { return SDL_GetSurfacePalette(surface); }

//! @copydoc SDL_AddSurfaceAlternateImage()
inline bool AddSurfaceAlternateImage(SDL_Surface* surface, SDL_Surface* image) { auto _ret = SDL_AddSurfaceAlternateImage(surface, image); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SurfaceHasAlternateImages()
inline bool SurfaceHasAlternateImages(SDL_Surface* surface) { return SDL_SurfaceHasAlternateImages(surface); }

//! @copydoc SDL_GetSurfaceImages()
inline SDL_Surface** GetSurfaceImages(SDL_Surface* surface, int* count) { auto _ret = SDL_GetSurfaceImages(surface, count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RemoveSurfaceAlternateImages()
inline void RemoveSurfaceAlternateImages(SDL_Surface* surface) {  SDL_RemoveSurfaceAlternateImages(surface); }

//! @copydoc SDL_LockSurface()
inline bool LockSurface(SDL_Surface* surface) { auto _ret = SDL_LockSurface(surface); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UnlockSurface()
inline void UnlockSurface(SDL_Surface* surface) {  SDL_UnlockSurface(surface); }

//! @copydoc SDL_LoadBMP_IO()
inline SDL_Surface* LoadBMP_IO(SDL_IOStream* src, bool closeio) { auto _ret = SDL_LoadBMP_IO(src, closeio); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_LoadBMP()
inline SDL_Surface* LoadBMP(const char* file) { auto _ret = SDL_LoadBMP(file); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SaveBMP_IO()
inline bool SaveBMP_IO(SDL_Surface* surface, SDL_IOStream* dst, bool closeio) { auto _ret = SDL_SaveBMP_IO(surface, dst, closeio); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SaveBMP()
inline bool SaveBMP(SDL_Surface* surface, const char* file) { auto _ret = SDL_SaveBMP(surface, file); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetSurfaceRLE()
inline bool SetSurfaceRLE(SDL_Surface* surface, bool enabled) { auto _ret = SDL_SetSurfaceRLE(surface, enabled); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SurfaceHasRLE()
inline bool SurfaceHasRLE(SDL_Surface* surface) { return SDL_SurfaceHasRLE(surface); }

//! @copydoc SDL_SetSurfaceColorKey()
inline bool SetSurfaceColorKey(SDL_Surface* surface, bool enabled, Uint32 key) { auto _ret = SDL_SetSurfaceColorKey(surface, enabled, key); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SurfaceHasColorKey()
inline bool SurfaceHasColorKey(SDL_Surface* surface) { return SDL_SurfaceHasColorKey(surface); }

//! @copydoc SDL_GetSurfaceColorKey()
inline bool GetSurfaceColorKey(SDL_Surface* surface, Uint32* key) { auto _ret = SDL_GetSurfaceColorKey(surface, key); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetSurfaceColorMod()
inline bool SetSurfaceColorMod(SDL_Surface* surface, Uint8 r, Uint8 g, Uint8 b) { auto _ret = SDL_SetSurfaceColorMod(surface, r, g, b); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetSurfaceColorMod()
inline bool GetSurfaceColorMod(SDL_Surface* surface, Uint8* r, Uint8* g, Uint8* b) { auto _ret = SDL_GetSurfaceColorMod(surface, r, g, b); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetSurfaceAlphaMod()
inline bool SetSurfaceAlphaMod(SDL_Surface* surface, Uint8 alpha) { auto _ret = SDL_SetSurfaceAlphaMod(surface, alpha); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetSurfaceAlphaMod()
inline bool GetSurfaceAlphaMod(SDL_Surface* surface, Uint8* alpha) { auto _ret = SDL_GetSurfaceAlphaMod(surface, alpha); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetSurfaceBlendMode()
inline bool SetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode blendMode) { auto _ret = SDL_SetSurfaceBlendMode(surface, blendMode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetSurfaceBlendMode()
inline bool GetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode* blendMode) { auto _ret = SDL_GetSurfaceBlendMode(surface, blendMode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetSurfaceClipRect()
inline bool SetSurfaceClipRect(SDL_Surface* surface, const SDL_Rect* rect) { return SDL_SetSurfaceClipRect(surface, rect); }

//! @copydoc SDL_GetSurfaceClipRect()
inline bool GetSurfaceClipRect(SDL_Surface* surface, SDL_Rect* rect) { auto _ret = SDL_GetSurfaceClipRect(surface, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_FlipSurface()
inline bool FlipSurface(SDL_Surface* surface, SDL_FlipMode flip) { auto _ret = SDL_FlipSurface(surface, flip); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DuplicateSurface()
inline SDL_Surface* DuplicateSurface(SDL_Surface* surface) { auto _ret = SDL_DuplicateSurface(surface); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ScaleSurface()
inline SDL_Surface* ScaleSurface(SDL_Surface* surface, int width, int height, SDL_ScaleMode scaleMode) { auto _ret = SDL_ScaleSurface(surface, width, height, scaleMode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ConvertSurface()
inline SDL_Surface* ConvertSurface(SDL_Surface* surface, SDL_PixelFormat format) { auto _ret = SDL_ConvertSurface(surface, format); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ConvertSurfaceAndColorspace()
inline SDL_Surface* ConvertSurfaceAndColorspace(SDL_Surface* surface, SDL_PixelFormat format, SDL_Palette* palette, SDL_Colorspace colorspace, SDL_PropertiesID props) { auto _ret = SDL_ConvertSurfaceAndColorspace(surface, format, palette, colorspace, props); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ConvertPixels()
inline bool ConvertPixels(int width, int height, SDL_PixelFormat src_format, const void* src, int src_pitch, SDL_PixelFormat dst_format, void* dst, int dst_pitch) { auto _ret = SDL_ConvertPixels(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ConvertPixelsAndColorspace()
inline bool ConvertPixelsAndColorspace(int width, int height, SDL_PixelFormat src_format, SDL_Colorspace src_colorspace, SDL_PropertiesID src_properties, const void* src, int src_pitch, SDL_PixelFormat dst_format, SDL_Colorspace dst_colorspace, SDL_PropertiesID dst_properties, void* dst, int dst_pitch) { auto _ret = SDL_ConvertPixelsAndColorspace(width, height, src_format, src_colorspace, src_properties, src, src_pitch, dst_format, dst_colorspace, dst_properties, dst, dst_pitch); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_PremultiplyAlpha()
inline bool PremultiplyAlpha(int width, int height, SDL_PixelFormat src_format, const void* src, int src_pitch, SDL_PixelFormat dst_format, void* dst, int dst_pitch, bool linear) { auto _ret = SDL_PremultiplyAlpha(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch, linear); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_PremultiplySurfaceAlpha()
inline bool PremultiplySurfaceAlpha(SDL_Surface* surface, bool linear) { auto _ret = SDL_PremultiplySurfaceAlpha(surface, linear); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ClearSurface()
inline bool ClearSurface(SDL_Surface* surface, float r, float g, float b, float a) { auto _ret = SDL_ClearSurface(surface, r, g, b, a); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_FillSurfaceRect()
inline bool FillSurfaceRect(SDL_Surface* dst, const SDL_Rect* rect, Uint32 color) { auto _ret = SDL_FillSurfaceRect(dst, rect, color); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_FillSurfaceRects()
inline bool FillSurfaceRects(SDL_Surface* dst, const SDL_Rect* rects, int count, Uint32 color) { auto _ret = SDL_FillSurfaceRects(dst, rects, count, color); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_BlitSurface()
inline bool BlitSurface(SDL_Surface* src, const SDL_Rect* srcrect, SDL_Surface* dst, const SDL_Rect* dstrect) { auto _ret = SDL_BlitSurface(src, srcrect, dst, dstrect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_BlitSurfaceUnchecked()
inline bool BlitSurfaceUnchecked(SDL_Surface* src, const SDL_Rect* srcrect, SDL_Surface* dst, const SDL_Rect* dstrect) { auto _ret = SDL_BlitSurfaceUnchecked(src, srcrect, dst, dstrect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_BlitSurfaceScaled()
inline bool BlitSurfaceScaled(SDL_Surface* src, const SDL_Rect* srcrect, SDL_Surface* dst, const SDL_Rect* dstrect, SDL_ScaleMode scaleMode) { auto _ret = SDL_BlitSurfaceScaled(src, srcrect, dst, dstrect, scaleMode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_BlitSurfaceUncheckedScaled()
inline bool BlitSurfaceUncheckedScaled(SDL_Surface* src, const SDL_Rect* srcrect, SDL_Surface* dst, const SDL_Rect* dstrect, SDL_ScaleMode scaleMode) { auto _ret = SDL_BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_BlitSurfaceTiled()
inline bool BlitSurfaceTiled(SDL_Surface* src, const SDL_Rect* srcrect, SDL_Surface* dst, const SDL_Rect* dstrect) { auto _ret = SDL_BlitSurfaceTiled(src, srcrect, dst, dstrect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_BlitSurfaceTiledWithScale()
inline bool BlitSurfaceTiledWithScale(SDL_Surface* src, const SDL_Rect* srcrect, float scale, SDL_ScaleMode scaleMode, SDL_Surface* dst, const SDL_Rect* dstrect) { auto _ret = SDL_BlitSurfaceTiledWithScale(src, srcrect, scale, scaleMode, dst, dstrect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_BlitSurface9Grid()
inline bool BlitSurface9Grid(SDL_Surface* src, const SDL_Rect* srcrect, int left_width, int right_width, int top_height, int bottom_height, float scale, SDL_ScaleMode scaleMode, SDL_Surface* dst, const SDL_Rect* dstrect) { auto _ret = SDL_BlitSurface9Grid(src, srcrect, left_width, right_width, top_height, bottom_height, scale, scaleMode, dst, dstrect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_MapSurfaceRGB()
inline Uint32 MapSurfaceRGB(SDL_Surface* surface, Uint8 r, Uint8 g, Uint8 b) { return SDL_MapSurfaceRGB(surface, r, g, b); }

//! @copydoc SDL_MapSurfaceRGBA()
inline Uint32 MapSurfaceRGBA(SDL_Surface* surface, Uint8 r, Uint8 g, Uint8 b, Uint8 a) { return SDL_MapSurfaceRGBA(surface, r, g, b, a); }

//! @copydoc SDL_ReadSurfacePixel()
inline bool ReadSurfacePixel(SDL_Surface* surface, int x, int y, Uint8* r, Uint8* g, Uint8* b, Uint8* a) { auto _ret = SDL_ReadSurfacePixel(surface, x, y, r, g, b, a); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadSurfacePixelFloat()
inline bool ReadSurfacePixelFloat(SDL_Surface* surface, int x, int y, float* r, float* g, float* b, float* a) { auto _ret = SDL_ReadSurfacePixelFloat(surface, x, y, r, g, b, a); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteSurfacePixel()
inline bool WriteSurfacePixel(SDL_Surface* surface, int x, int y, Uint8 r, Uint8 g, Uint8 b, Uint8 a) { auto _ret = SDL_WriteSurfacePixel(surface, x, y, r, g, b, a); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteSurfacePixelFloat()
inline bool WriteSurfacePixelFloat(SDL_Surface* surface, int x, int y, float r, float g, float b, float a) { auto _ret = SDL_WriteSurfacePixelFloat(surface, x, y, r, g, b, a); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetNumCameraDrivers()
inline int GetNumCameraDrivers() { return SDL_GetNumCameraDrivers(); }

//! @copydoc SDL_GetCameraDriver()
inline const char* GetCameraDriver(int index) { return SDL_GetCameraDriver(index); }

//! @copydoc SDL_GetCurrentCameraDriver()
inline const char* GetCurrentCameraDriver() { return SDL_GetCurrentCameraDriver(); }

//! @copydoc SDL_GetCameras()
inline SDL_CameraID* GetCameras(int* count) { auto _ret = SDL_GetCameras(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetCameraSupportedFormats()
inline SDL_CameraSpec** GetCameraSupportedFormats(SDL_CameraID devid, int* count) { auto _ret = SDL_GetCameraSupportedFormats(devid, count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetCameraName()
inline const char* GetCameraName(SDL_CameraID instance_id) { auto _ret = SDL_GetCameraName(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetCameraPosition()
inline SDL_CameraPosition GetCameraPosition(SDL_CameraID instance_id) { return SDL_GetCameraPosition(instance_id); }

//! @copydoc SDL_OpenCamera()
inline SDL_Camera* OpenCamera(SDL_CameraID instance_id, const SDL_CameraSpec* spec) { auto _ret = SDL_OpenCamera(instance_id, spec); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetCameraPermissionState()
inline int GetCameraPermissionState(SDL_Camera* camera) { return SDL_GetCameraPermissionState(camera); }

//! @copydoc SDL_GetCameraID()
inline SDL_CameraID GetCameraID(SDL_Camera* camera) { auto _ret = SDL_GetCameraID(camera); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetCameraProperties()
inline SDL_PropertiesID GetCameraProperties(SDL_Camera* camera) { auto _ret = SDL_GetCameraProperties(camera); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetCameraFormat()
inline bool GetCameraFormat(SDL_Camera* camera, SDL_CameraSpec* spec) { auto _ret = SDL_GetCameraFormat(camera, spec); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_AcquireCameraFrame()
inline SDL_Surface* AcquireCameraFrame(SDL_Camera* camera, Uint64* timestampNS) { return SDL_AcquireCameraFrame(camera, timestampNS); }

//! @copydoc SDL_ReleaseCameraFrame()
inline void ReleaseCameraFrame(SDL_Camera* camera, SDL_Surface* frame) {  SDL_ReleaseCameraFrame(camera, frame); }

//! @copydoc SDL_CloseCamera()
inline void CloseCamera(SDL_Camera* camera) {  SDL_CloseCamera(camera); }

//! @copydoc SDL_SetClipboardText()
inline bool SetClipboardText(const char* text) { auto _ret = SDL_SetClipboardText(text); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetClipboardText()
inline char* GetClipboardText() { auto _ret = SDL_GetClipboardText(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_HasClipboardText()
inline bool HasClipboardText() { return SDL_HasClipboardText(); }

//! @copydoc SDL_SetPrimarySelectionText()
inline bool SetPrimarySelectionText(const char* text) { auto _ret = SDL_SetPrimarySelectionText(text); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetPrimarySelectionText()
inline char* GetPrimarySelectionText() { auto _ret = SDL_GetPrimarySelectionText(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_HasPrimarySelectionText()
inline bool HasPrimarySelectionText() { return SDL_HasPrimarySelectionText(); }

//! @copydoc SDL_SetClipboardData()
inline bool SetClipboardData(SDL_ClipboardDataCallback callback, SDL_ClipboardCleanupCallback cleanup, void* userdata, const char** mime_types, size_t num_mime_types) { auto _ret = SDL_SetClipboardData(callback, cleanup, userdata, mime_types, num_mime_types); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ClearClipboardData()
inline bool ClearClipboardData() { auto _ret = SDL_ClearClipboardData(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetClipboardData()
inline void* GetClipboardData(const char* mime_type, size_t* size) { auto _ret = SDL_GetClipboardData(mime_type, size); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_HasClipboardData()
inline bool HasClipboardData(const char* mime_type) { return SDL_HasClipboardData(mime_type); }

//! @copydoc SDL_GetClipboardMimeTypes()
inline char** GetClipboardMimeTypes(size_t* num_mime_types) { auto _ret = SDL_GetClipboardMimeTypes(num_mime_types); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetNumLogicalCPUCores()
inline int GetNumLogicalCPUCores() { return SDL_GetNumLogicalCPUCores(); }

//! @copydoc SDL_GetCPUCacheLineSize()
inline int GetCPUCacheLineSize() { return SDL_GetCPUCacheLineSize(); }

//! @copydoc SDL_HasAltiVec()
inline bool HasAltiVec() { return SDL_HasAltiVec(); }

//! @copydoc SDL_HasMMX()
inline bool HasMMX() { return SDL_HasMMX(); }

//! @copydoc SDL_HasSSE()
inline bool HasSSE() { return SDL_HasSSE(); }

//! @copydoc SDL_HasSSE2()
inline bool HasSSE2() { return SDL_HasSSE2(); }

//! @copydoc SDL_HasSSE3()
inline bool HasSSE3() { return SDL_HasSSE3(); }

//! @copydoc SDL_HasSSE41()
inline bool HasSSE41() { return SDL_HasSSE41(); }

//! @copydoc SDL_HasSSE42()
inline bool HasSSE42() { return SDL_HasSSE42(); }

//! @copydoc SDL_HasAVX()
inline bool HasAVX() { return SDL_HasAVX(); }

//! @copydoc SDL_HasAVX2()
inline bool HasAVX2() { return SDL_HasAVX2(); }

//! @copydoc SDL_HasAVX512F()
inline bool HasAVX512F() { return SDL_HasAVX512F(); }

//! @copydoc SDL_HasARMSIMD()
inline bool HasARMSIMD() { return SDL_HasARMSIMD(); }

//! @copydoc SDL_HasNEON()
inline bool HasNEON() { return SDL_HasNEON(); }

//! @copydoc SDL_HasLSX()
inline bool HasLSX() { return SDL_HasLSX(); }

//! @copydoc SDL_HasLASX()
inline bool HasLASX() { return SDL_HasLASX(); }

//! @copydoc SDL_GetSystemRAM()
inline int GetSystemRAM() { return SDL_GetSystemRAM(); }

//! @copydoc SDL_GetSIMDAlignment()
inline size_t GetSIMDAlignment() { return SDL_GetSIMDAlignment(); }

//! @copydoc SDL_GetNumVideoDrivers()
inline int GetNumVideoDrivers() { return SDL_GetNumVideoDrivers(); }

//! @copydoc SDL_GetVideoDriver()
inline const char* GetVideoDriver(int index) { return SDL_GetVideoDriver(index); }

//! @copydoc SDL_GetCurrentVideoDriver()
inline const char* GetCurrentVideoDriver() { return SDL_GetCurrentVideoDriver(); }

//! @copydoc SDL_GetSystemTheme()
inline SDL_SystemTheme GetSystemTheme() { return SDL_GetSystemTheme(); }

//! @copydoc SDL_GetDisplays()
inline SDL_DisplayID* GetDisplays(int* count) { auto _ret = SDL_GetDisplays(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetPrimaryDisplay()
inline SDL_DisplayID GetPrimaryDisplay() { auto _ret = SDL_GetPrimaryDisplay(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetDisplayProperties()
inline SDL_PropertiesID GetDisplayProperties(SDL_DisplayID displayID) { auto _ret = SDL_GetDisplayProperties(displayID); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetDisplayName()
inline const char* GetDisplayName(SDL_DisplayID displayID) { auto _ret = SDL_GetDisplayName(displayID); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetDisplayBounds()
inline bool GetDisplayBounds(SDL_DisplayID displayID, SDL_Rect* rect) { auto _ret = SDL_GetDisplayBounds(displayID, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetDisplayUsableBounds()
inline bool GetDisplayUsableBounds(SDL_DisplayID displayID, SDL_Rect* rect) { auto _ret = SDL_GetDisplayUsableBounds(displayID, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetNaturalDisplayOrientation()
inline SDL_DisplayOrientation GetNaturalDisplayOrientation(SDL_DisplayID displayID) { return SDL_GetNaturalDisplayOrientation(displayID); }

//! @copydoc SDL_GetCurrentDisplayOrientation()
inline SDL_DisplayOrientation GetCurrentDisplayOrientation(SDL_DisplayID displayID) { return SDL_GetCurrentDisplayOrientation(displayID); }

//! @copydoc SDL_GetDisplayContentScale()
inline float GetDisplayContentScale(SDL_DisplayID displayID) { auto _ret = SDL_GetDisplayContentScale(displayID); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetFullscreenDisplayModes()
inline SDL_DisplayMode** GetFullscreenDisplayModes(SDL_DisplayID displayID, int* count) { auto _ret = SDL_GetFullscreenDisplayModes(displayID, count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetClosestFullscreenDisplayMode()
inline bool GetClosestFullscreenDisplayMode(SDL_DisplayID displayID, int w, int h, float refresh_rate, bool include_high_density_modes, SDL_DisplayMode* closest) { auto _ret = SDL_GetClosestFullscreenDisplayMode(displayID, w, h, refresh_rate, include_high_density_modes, closest); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetDesktopDisplayMode()
inline const SDL_DisplayMode* GetDesktopDisplayMode(SDL_DisplayID displayID) { auto _ret = SDL_GetDesktopDisplayMode(displayID); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetCurrentDisplayMode()
inline const SDL_DisplayMode* GetCurrentDisplayMode(SDL_DisplayID displayID) { auto _ret = SDL_GetCurrentDisplayMode(displayID); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetDisplayForPoint()
inline SDL_DisplayID GetDisplayForPoint(const SDL_Point* point) { auto _ret = SDL_GetDisplayForPoint(point); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetDisplayForRect()
inline SDL_DisplayID GetDisplayForRect(const SDL_Rect* rect) { auto _ret = SDL_GetDisplayForRect(rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetDisplayForWindow()
inline SDL_DisplayID GetDisplayForWindow(SDL_Window* window) { auto _ret = SDL_GetDisplayForWindow(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowPixelDensity()
inline float GetWindowPixelDensity(SDL_Window* window) { auto _ret = SDL_GetWindowPixelDensity(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowDisplayScale()
inline float GetWindowDisplayScale(SDL_Window* window) { auto _ret = SDL_GetWindowDisplayScale(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowFullscreenMode()
inline bool SetWindowFullscreenMode(SDL_Window* window, const SDL_DisplayMode* mode) { auto _ret = SDL_SetWindowFullscreenMode(window, mode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowFullscreenMode()
inline const SDL_DisplayMode* GetWindowFullscreenMode(SDL_Window* window) { return SDL_GetWindowFullscreenMode(window); }

//! @copydoc SDL_GetWindowICCProfile()
inline void* GetWindowICCProfile(SDL_Window* window, size_t* size) { auto _ret = SDL_GetWindowICCProfile(window, size); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowPixelFormat()
inline SDL_PixelFormat GetWindowPixelFormat(SDL_Window* window) { auto _ret = SDL_GetWindowPixelFormat(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindows()
inline SDL_Window** GetWindows(int* count) { auto _ret = SDL_GetWindows(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateWindow()
inline SDL_Window* CreateWindow(const char* title, int w, int h, SDL::WindowFlags flags) { auto _ret = SDL_CreateWindow(title, w, h, flags); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreatePopupWindow()
inline SDL_Window* CreatePopupWindow(SDL_Window* parent, int offset_x, int offset_y, int w, int h, SDL::WindowFlags flags) { auto _ret = SDL_CreatePopupWindow(parent, offset_x, offset_y, w, h, flags); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateWindowWithProperties()
inline SDL_Window* CreateWindowWithProperties(SDL_PropertiesID props) { auto _ret = SDL_CreateWindowWithProperties(props); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowID()
inline SDL_WindowID GetWindowID(SDL_Window* window) { auto _ret = SDL_GetWindowID(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowFromID()
inline SDL_Window* GetWindowFromID(SDL_WindowID id) { auto _ret = SDL_GetWindowFromID(id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowParent()
inline SDL_Window* GetWindowParent(SDL_Window* window) { return SDL_GetWindowParent(window); }

//! @copydoc SDL_GetWindowProperties()
inline SDL_PropertiesID GetWindowProperties(SDL_Window* window) { auto _ret = SDL_GetWindowProperties(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowFlags()
inline SDL::WindowFlags GetWindowFlags(SDL_Window* window) { return (SDL::WindowFlags) SDL_GetWindowFlags(window); }

//! @copydoc SDL_SetWindowTitle()
inline bool SetWindowTitle(SDL_Window* window, const char* title) { auto _ret = SDL_SetWindowTitle(window, title); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowTitle()
inline const char* GetWindowTitle(SDL_Window* window) { return SDL_GetWindowTitle(window); }

//! @copydoc SDL_SetWindowIcon()
inline bool SetWindowIcon(SDL_Window* window, SDL_Surface* icon) { auto _ret = SDL_SetWindowIcon(window, icon); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowPosition()
inline bool SetWindowPosition(SDL_Window* window, int x, int y) { auto _ret = SDL_SetWindowPosition(window, x, y); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowPosition()
inline bool GetWindowPosition(SDL_Window* window, int* x, int* y) { auto _ret = SDL_GetWindowPosition(window, x, y); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowSize()
inline bool SetWindowSize(SDL_Window* window, int w, int h) { auto _ret = SDL_SetWindowSize(window, w, h); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowSize()
inline bool GetWindowSize(SDL_Window* window, int* w, int* h) { auto _ret = SDL_GetWindowSize(window, w, h); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowSafeArea()
inline bool GetWindowSafeArea(SDL_Window* window, SDL_Rect* rect) { auto _ret = SDL_GetWindowSafeArea(window, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowAspectRatio()
inline bool SetWindowAspectRatio(SDL_Window* window, float min_aspect, float max_aspect) { auto _ret = SDL_SetWindowAspectRatio(window, min_aspect, max_aspect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowAspectRatio()
inline bool GetWindowAspectRatio(SDL_Window* window, float* min_aspect, float* max_aspect) { auto _ret = SDL_GetWindowAspectRatio(window, min_aspect, max_aspect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowBordersSize()
inline bool GetWindowBordersSize(SDL_Window* window, int* top, int* left, int* bottom, int* right) { auto _ret = SDL_GetWindowBordersSize(window, top, left, bottom, right); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowSizeInPixels()
inline bool GetWindowSizeInPixels(SDL_Window* window, int* w, int* h) { auto _ret = SDL_GetWindowSizeInPixels(window, w, h); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowMinimumSize()
inline bool SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h) { auto _ret = SDL_SetWindowMinimumSize(window, min_w, min_h); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowMinimumSize()
inline bool GetWindowMinimumSize(SDL_Window* window, int* w, int* h) { auto _ret = SDL_GetWindowMinimumSize(window, w, h); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowMaximumSize()
inline bool SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h) { auto _ret = SDL_SetWindowMaximumSize(window, max_w, max_h); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowMaximumSize()
inline bool GetWindowMaximumSize(SDL_Window* window, int* w, int* h) { auto _ret = SDL_GetWindowMaximumSize(window, w, h); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowBordered()
inline bool SetWindowBordered(SDL_Window* window, bool bordered) { auto _ret = SDL_SetWindowBordered(window, bordered); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowResizable()
inline bool SetWindowResizable(SDL_Window* window, bool resizable) { auto _ret = SDL_SetWindowResizable(window, resizable); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowAlwaysOnTop()
inline bool SetWindowAlwaysOnTop(SDL_Window* window, bool on_top) { auto _ret = SDL_SetWindowAlwaysOnTop(window, on_top); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ShowWindow()
inline bool ShowWindow(SDL_Window* window) { auto _ret = SDL_ShowWindow(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_HideWindow()
inline bool HideWindow(SDL_Window* window) { auto _ret = SDL_HideWindow(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RaiseWindow()
inline bool RaiseWindow(SDL_Window* window) { auto _ret = SDL_RaiseWindow(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_MaximizeWindow()
inline bool MaximizeWindow(SDL_Window* window) { auto _ret = SDL_MaximizeWindow(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_MinimizeWindow()
inline bool MinimizeWindow(SDL_Window* window) { auto _ret = SDL_MinimizeWindow(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RestoreWindow()
inline bool RestoreWindow(SDL_Window* window) { auto _ret = SDL_RestoreWindow(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowFullscreen()
inline bool SetWindowFullscreen(SDL_Window* window, bool fullscreen) { auto _ret = SDL_SetWindowFullscreen(window, fullscreen); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SyncWindow()
inline bool SyncWindow(SDL_Window* window) { return SDL_SyncWindow(window); }

//! @copydoc SDL_WindowHasSurface()
inline bool WindowHasSurface(SDL_Window* window) { return SDL_WindowHasSurface(window); }

//! @copydoc SDL_GetWindowSurface()
inline SDL_Surface* GetWindowSurface(SDL_Window* window) { auto _ret = SDL_GetWindowSurface(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowSurfaceVSync()
inline bool SetWindowSurfaceVSync(SDL_Window* window, int vsync) { auto _ret = SDL_SetWindowSurfaceVSync(window, vsync); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowSurfaceVSync()
inline bool GetWindowSurfaceVSync(SDL_Window* window, int* vsync) { auto _ret = SDL_GetWindowSurfaceVSync(window, vsync); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UpdateWindowSurface()
inline bool UpdateWindowSurface(SDL_Window* window) { auto _ret = SDL_UpdateWindowSurface(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UpdateWindowSurfaceRects()
inline bool UpdateWindowSurfaceRects(SDL_Window* window, const SDL_Rect* rects, int numrects) { auto _ret = SDL_UpdateWindowSurfaceRects(window, rects, numrects); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroyWindowSurface()
inline bool DestroyWindowSurface(SDL_Window* window) { auto _ret = SDL_DestroyWindowSurface(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowKeyboardGrab()
inline bool SetWindowKeyboardGrab(SDL_Window* window, bool grabbed) { auto _ret = SDL_SetWindowKeyboardGrab(window, grabbed); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowMouseGrab()
inline bool SetWindowMouseGrab(SDL_Window* window, bool grabbed) { auto _ret = SDL_SetWindowMouseGrab(window, grabbed); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowKeyboardGrab()
inline bool GetWindowKeyboardGrab(SDL_Window* window) { return SDL_GetWindowKeyboardGrab(window); }

//! @copydoc SDL_GetWindowMouseGrab()
inline bool GetWindowMouseGrab(SDL_Window* window) { return SDL_GetWindowMouseGrab(window); }

//! @copydoc SDL_GetGrabbedWindow()
inline SDL_Window* GetGrabbedWindow() { return SDL_GetGrabbedWindow(); }

//! @copydoc SDL_SetWindowMouseRect()
inline bool SetWindowMouseRect(SDL_Window* window, const SDL_Rect* rect) { auto _ret = SDL_SetWindowMouseRect(window, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowMouseRect()
inline const SDL_Rect* GetWindowMouseRect(SDL_Window* window) { return SDL_GetWindowMouseRect(window); }

//! @copydoc SDL_SetWindowOpacity()
inline bool SetWindowOpacity(SDL_Window* window, float opacity) { auto _ret = SDL_SetWindowOpacity(window, opacity); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowOpacity()
inline float GetWindowOpacity(SDL_Window* window) { auto _ret = SDL_GetWindowOpacity(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowParent()
inline bool SetWindowParent(SDL_Window* window, SDL_Window* parent) { auto _ret = SDL_SetWindowParent(window, parent); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowModal()
inline bool SetWindowModal(SDL_Window* window, bool modal) { auto _ret = SDL_SetWindowModal(window, modal); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowFocusable()
inline bool SetWindowFocusable(SDL_Window* window, bool focusable) { auto _ret = SDL_SetWindowFocusable(window, focusable); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ShowWindowSystemMenu()
inline bool ShowWindowSystemMenu(SDL_Window* window, int x, int y) { auto _ret = SDL_ShowWindowSystemMenu(window, x, y); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowHitTest()
inline bool SetWindowHitTest(SDL_Window* window, SDL_HitTest callback, void* callback_data) { auto _ret = SDL_SetWindowHitTest(window, callback, callback_data); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowShape()
inline bool SetWindowShape(SDL_Window* window, SDL_Surface* shape) { auto _ret = SDL_SetWindowShape(window, shape); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_FlashWindow()
inline bool FlashWindow(SDL_Window* window, SDL_FlashOperation operation) { auto _ret = SDL_FlashWindow(window, operation); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroyWindow()
inline void DestroyWindow(SDL_Window* window) {  SDL_DestroyWindow(window); }

//! @copydoc SDL_ScreenSaverEnabled()
inline bool ScreenSaverEnabled() { return SDL_ScreenSaverEnabled(); }

//! @copydoc SDL_EnableScreenSaver()
inline bool EnableScreenSaver() { auto _ret = SDL_EnableScreenSaver(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DisableScreenSaver()
inline bool DisableScreenSaver() { auto _ret = SDL_DisableScreenSaver(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GL_LoadLibrary()
inline bool GL_LoadLibrary(const char* path) { auto _ret = SDL_GL_LoadLibrary(path); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GL_GetProcAddress()
inline SDL_FunctionPointer GL_GetProcAddress(const char* proc) { return SDL_GL_GetProcAddress(proc); }

//! @copydoc SDL_EGL_GetProcAddress()
inline SDL_FunctionPointer EGL_GetProcAddress(const char* proc) { return SDL_EGL_GetProcAddress(proc); }

//! @copydoc SDL_GL_UnloadLibrary()
inline void GL_UnloadLibrary() {  SDL_GL_UnloadLibrary(); }

//! @copydoc SDL_GL_ExtensionSupported()
inline bool GL_ExtensionSupported(const char* extension) { return SDL_GL_ExtensionSupported(extension); }

//! @copydoc SDL_GL_ResetAttributes()
inline void GL_ResetAttributes() {  SDL_GL_ResetAttributes(); }

//! @copydoc SDL_GL_SetAttribute()
inline bool GL_SetAttribute(SDL_GLAttr attr, int value) { auto _ret = SDL_GL_SetAttribute(attr, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GL_GetAttribute()
inline bool GL_GetAttribute(SDL_GLAttr attr, int* value) { auto _ret = SDL_GL_GetAttribute(attr, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GL_CreateContext()
inline SDL_GLContext GL_CreateContext(SDL_Window* window) { auto _ret = SDL_GL_CreateContext(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GL_MakeCurrent()
inline bool GL_MakeCurrent(SDL_Window* window, SDL_GLContext context) { auto _ret = SDL_GL_MakeCurrent(window, context); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GL_GetCurrentWindow()
inline SDL_Window* GL_GetCurrentWindow() { auto _ret = SDL_GL_GetCurrentWindow(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GL_GetCurrentContext()
inline SDL_GLContext GL_GetCurrentContext() { auto _ret = SDL_GL_GetCurrentContext(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_EGL_GetCurrentDisplay()
inline SDL_EGLDisplay EGL_GetCurrentDisplay() { auto _ret = SDL_EGL_GetCurrentDisplay(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_EGL_GetCurrentConfig()
inline SDL_EGLConfig EGL_GetCurrentConfig() { auto _ret = SDL_EGL_GetCurrentConfig(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_EGL_GetWindowSurface()
inline SDL_EGLSurface EGL_GetWindowSurface(SDL_Window* window) { return SDL_EGL_GetWindowSurface(window); }

//! @copydoc SDL_EGL_SetAttributeCallbacks()
inline void EGL_SetAttributeCallbacks(SDL_EGLAttribArrayCallback platformAttribCallback, SDL_EGLIntArrayCallback surfaceAttribCallback, SDL_EGLIntArrayCallback contextAttribCallback, void* userdata) {  SDL_EGL_SetAttributeCallbacks(platformAttribCallback, surfaceAttribCallback, contextAttribCallback, userdata); }

//! @copydoc SDL_GL_SetSwapInterval()
inline bool GL_SetSwapInterval(int interval) { auto _ret = SDL_GL_SetSwapInterval(interval); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GL_GetSwapInterval()
inline bool GL_GetSwapInterval(int* interval) { auto _ret = SDL_GL_GetSwapInterval(interval); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GL_SwapWindow()
inline bool GL_SwapWindow(SDL_Window* window) { auto _ret = SDL_GL_SwapWindow(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GL_DestroyContext()
inline bool GL_DestroyContext(SDL_GLContext context) { auto _ret = SDL_GL_DestroyContext(context); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ShowOpenFileDialog()
inline void ShowOpenFileDialog(SDL_DialogFileCallback callback, void* userdata, SDL_Window* window, const SDL_DialogFileFilter* filters, int nfilters, const char* default_location, bool allow_many) {  SDL_ShowOpenFileDialog(callback, userdata, window, filters, nfilters, default_location, allow_many); }

//! @copydoc SDL_ShowSaveFileDialog()
inline void ShowSaveFileDialog(SDL_DialogFileCallback callback, void* userdata, SDL_Window* window, const SDL_DialogFileFilter* filters, int nfilters, const char* default_location) {  SDL_ShowSaveFileDialog(callback, userdata, window, filters, nfilters, default_location); }

//! @copydoc SDL_ShowOpenFolderDialog()
inline void ShowOpenFolderDialog(SDL_DialogFileCallback callback, void* userdata, SDL_Window* window, const char* default_location, bool allow_many) {  SDL_ShowOpenFolderDialog(callback, userdata, window, default_location, allow_many); }

//! @copydoc SDL_ShowFileDialogWithProperties()
inline void ShowFileDialogWithProperties(SDL_FileDialogType type, SDL_DialogFileCallback callback, void* userdata, SDL_PropertiesID props) {  SDL_ShowFileDialogWithProperties(type, callback, userdata, props); }

//! @copydoc SDL_GUIDToString()
inline void GUIDToString(SDL_GUID guid, char* pszGUID, int cbGUID) {  SDL_GUIDToString(guid, pszGUID, cbGUID); }

//! @copydoc SDL_StringToGUID()
inline SDL_GUID StringToGUID(const char* pchGUID) { return SDL_StringToGUID(pchGUID); }

//! @copydoc SDL_GetPowerInfo()
inline SDL_PowerState GetPowerInfo(int* seconds, int* percent) { auto _ret = SDL_GetPowerInfo(seconds, percent); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetSensors()
inline SDL_SensorID* GetSensors(int* count) { auto _ret = SDL_GetSensors(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetSensorNameForID()
inline const char* GetSensorNameForID(SDL_SensorID instance_id) { return SDL_GetSensorNameForID(instance_id); }

//! @copydoc SDL_GetSensorTypeForID()
inline SDL_SensorType GetSensorTypeForID(SDL_SensorID instance_id) { return SDL_GetSensorTypeForID(instance_id); }

//! @copydoc SDL_GetSensorNonPortableTypeForID()
inline int GetSensorNonPortableTypeForID(SDL_SensorID instance_id) { return SDL_GetSensorNonPortableTypeForID(instance_id); }

//! @copydoc SDL_OpenSensor()
inline SDL_Sensor* OpenSensor(SDL_SensorID instance_id) { auto _ret = SDL_OpenSensor(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetSensorFromID()
inline SDL_Sensor* GetSensorFromID(SDL_SensorID instance_id) { auto _ret = SDL_GetSensorFromID(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetSensorProperties()
inline SDL_PropertiesID GetSensorProperties(SDL_Sensor* sensor) { auto _ret = SDL_GetSensorProperties(sensor); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetSensorName()
inline const char* GetSensorName(SDL_Sensor* sensor) { auto _ret = SDL_GetSensorName(sensor); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetSensorType()
inline SDL_SensorType GetSensorType(SDL_Sensor* sensor) { return SDL_GetSensorType(sensor); }

//! @copydoc SDL_GetSensorNonPortableType()
inline int GetSensorNonPortableType(SDL_Sensor* sensor) { return SDL_GetSensorNonPortableType(sensor); }

//! @copydoc SDL_GetSensorID()
inline SDL_SensorID GetSensorID(SDL_Sensor* sensor) { auto _ret = SDL_GetSensorID(sensor); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetSensorData()
inline bool GetSensorData(SDL_Sensor* sensor, float* data, int num_values) { auto _ret = SDL_GetSensorData(sensor, data, num_values); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CloseSensor()
inline void CloseSensor(SDL_Sensor* sensor) {  SDL_CloseSensor(sensor); }

//! @copydoc SDL_UpdateSensors()
inline void UpdateSensors() {  SDL_UpdateSensors(); }

//! @copydoc SDL_LockJoysticks()
inline void LockJoysticks() {  SDL_LockJoysticks(); }

//! @copydoc SDL_UnlockJoysticks()
inline void UnlockJoysticks() {  SDL_UnlockJoysticks(); }

//! @copydoc SDL_HasJoystick()
inline bool HasJoystick() { return SDL_HasJoystick(); }

//! @copydoc SDL_GetJoysticks()
inline SDL_JoystickID* GetJoysticks(int* count) { auto _ret = SDL_GetJoysticks(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickNameForID()
inline const char* GetJoystickNameForID(SDL_JoystickID instance_id) { auto _ret = SDL_GetJoystickNameForID(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickPathForID()
inline const char* GetJoystickPathForID(SDL_JoystickID instance_id) { auto _ret = SDL_GetJoystickPathForID(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickPlayerIndexForID()
inline int GetJoystickPlayerIndexForID(SDL_JoystickID instance_id) { return SDL_GetJoystickPlayerIndexForID(instance_id); }

//! @copydoc SDL_GetJoystickGUIDForID()
inline SDL_GUID GetJoystickGUIDForID(SDL_JoystickID instance_id) { return SDL_GetJoystickGUIDForID(instance_id); }

//! @copydoc SDL_GetJoystickVendorForID()
inline Uint16 GetJoystickVendorForID(SDL_JoystickID instance_id) { return SDL_GetJoystickVendorForID(instance_id); }

//! @copydoc SDL_GetJoystickProductForID()
inline Uint16 GetJoystickProductForID(SDL_JoystickID instance_id) { return SDL_GetJoystickProductForID(instance_id); }

//! @copydoc SDL_GetJoystickProductVersionForID()
inline Uint16 GetJoystickProductVersionForID(SDL_JoystickID instance_id) { return SDL_GetJoystickProductVersionForID(instance_id); }

//! @copydoc SDL_GetJoystickTypeForID()
inline SDL_JoystickType GetJoystickTypeForID(SDL_JoystickID instance_id) { return SDL_GetJoystickTypeForID(instance_id); }

//! @copydoc SDL_OpenJoystick()
inline SDL_Joystick* OpenJoystick(SDL_JoystickID instance_id) { auto _ret = SDL_OpenJoystick(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickFromID()
inline SDL_Joystick* GetJoystickFromID(SDL_JoystickID instance_id) { auto _ret = SDL_GetJoystickFromID(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickFromPlayerIndex()
inline SDL_Joystick* GetJoystickFromPlayerIndex(int player_index) { auto _ret = SDL_GetJoystickFromPlayerIndex(player_index); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_AttachVirtualJoystick()
inline SDL_JoystickID AttachVirtualJoystick(const SDL_VirtualJoystickDesc* desc) { auto _ret = SDL_AttachVirtualJoystick(desc); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DetachVirtualJoystick()
inline bool DetachVirtualJoystick(SDL_JoystickID instance_id) { auto _ret = SDL_DetachVirtualJoystick(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_IsJoystickVirtual()
inline bool IsJoystickVirtual(SDL_JoystickID instance_id) { return SDL_IsJoystickVirtual(instance_id); }

//! @copydoc SDL_SetJoystickVirtualAxis()
inline bool SetJoystickVirtualAxis(SDL_Joystick* joystick, int axis, Sint16 value) { auto _ret = SDL_SetJoystickVirtualAxis(joystick, axis, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetJoystickVirtualBall()
inline bool SetJoystickVirtualBall(SDL_Joystick* joystick, int ball, Sint16 xrel, Sint16 yrel) { auto _ret = SDL_SetJoystickVirtualBall(joystick, ball, xrel, yrel); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetJoystickVirtualButton()
inline bool SetJoystickVirtualButton(SDL_Joystick* joystick, int button, bool down) { auto _ret = SDL_SetJoystickVirtualButton(joystick, button, down); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetJoystickVirtualHat()
inline bool SetJoystickVirtualHat(SDL_Joystick* joystick, int hat, Uint8 value) { auto _ret = SDL_SetJoystickVirtualHat(joystick, hat, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetJoystickVirtualTouchpad()
inline bool SetJoystickVirtualTouchpad(SDL_Joystick* joystick, int touchpad, int finger, bool down, float x, float y, float pressure) { auto _ret = SDL_SetJoystickVirtualTouchpad(joystick, touchpad, finger, down, x, y, pressure); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SendJoystickVirtualSensorData()
inline bool SendJoystickVirtualSensorData(SDL_Joystick* joystick, SDL_SensorType type, Uint64 sensor_timestamp, const float* data, int num_values) { auto _ret = SDL_SendJoystickVirtualSensorData(joystick, type, sensor_timestamp, data, num_values); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickProperties()
inline SDL_PropertiesID GetJoystickProperties(SDL_Joystick* joystick) { auto _ret = SDL_GetJoystickProperties(joystick); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickName()
inline const char* GetJoystickName(SDL_Joystick* joystick) { auto _ret = SDL_GetJoystickName(joystick); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickPath()
inline const char* GetJoystickPath(SDL_Joystick* joystick) { auto _ret = SDL_GetJoystickPath(joystick); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickPlayerIndex()
inline int GetJoystickPlayerIndex(SDL_Joystick* joystick) { return SDL_GetJoystickPlayerIndex(joystick); }

//! @copydoc SDL_SetJoystickPlayerIndex()
inline bool SetJoystickPlayerIndex(SDL_Joystick* joystick, int player_index) { auto _ret = SDL_SetJoystickPlayerIndex(joystick, player_index); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickGUID()
inline SDL_GUID GetJoystickGUID(SDL_Joystick* joystick) { auto _ret = SDL_GetJoystickGUID(joystick); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickVendor()
inline Uint16 GetJoystickVendor(SDL_Joystick* joystick) { return SDL_GetJoystickVendor(joystick); }

//! @copydoc SDL_GetJoystickProduct()
inline Uint16 GetJoystickProduct(SDL_Joystick* joystick) { return SDL_GetJoystickProduct(joystick); }

//! @copydoc SDL_GetJoystickProductVersion()
inline Uint16 GetJoystickProductVersion(SDL_Joystick* joystick) { return SDL_GetJoystickProductVersion(joystick); }

//! @copydoc SDL_GetJoystickFirmwareVersion()
inline Uint16 GetJoystickFirmwareVersion(SDL_Joystick* joystick) { return SDL_GetJoystickFirmwareVersion(joystick); }

//! @copydoc SDL_GetJoystickSerial()
inline const char* GetJoystickSerial(SDL_Joystick* joystick) { return SDL_GetJoystickSerial(joystick); }

//! @copydoc SDL_GetJoystickType()
inline SDL_JoystickType GetJoystickType(SDL_Joystick* joystick) { return SDL_GetJoystickType(joystick); }

//! @copydoc SDL_GetJoystickGUIDInfo()
inline void GetJoystickGUIDInfo(SDL_GUID guid, Uint16* vendor, Uint16* product, Uint16* version, Uint16* crc16) {  SDL_GetJoystickGUIDInfo(guid, vendor, product, version, crc16); }

//! @copydoc SDL_JoystickConnected()
inline bool JoystickConnected(SDL_Joystick* joystick) { auto _ret = SDL_JoystickConnected(joystick); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickID()
inline SDL_JoystickID GetJoystickID(SDL_Joystick* joystick) { auto _ret = SDL_GetJoystickID(joystick); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetNumJoystickAxes()
inline int GetNumJoystickAxes(SDL_Joystick* joystick) { auto _ret = SDL_GetNumJoystickAxes(joystick); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetNumJoystickBalls()
inline int GetNumJoystickBalls(SDL_Joystick* joystick) { auto _ret = SDL_GetNumJoystickBalls(joystick); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetNumJoystickHats()
inline int GetNumJoystickHats(SDL_Joystick* joystick) { auto _ret = SDL_GetNumJoystickHats(joystick); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetNumJoystickButtons()
inline int GetNumJoystickButtons(SDL_Joystick* joystick) { auto _ret = SDL_GetNumJoystickButtons(joystick); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetJoystickEventsEnabled()
inline void SetJoystickEventsEnabled(bool enabled) {  SDL_SetJoystickEventsEnabled(enabled); }

//! @copydoc SDL_JoystickEventsEnabled()
inline bool JoystickEventsEnabled() { return SDL_JoystickEventsEnabled(); }

//! @copydoc SDL_UpdateJoysticks()
inline void UpdateJoysticks() {  SDL_UpdateJoysticks(); }

//! @copydoc SDL_GetJoystickAxis()
inline Sint16 GetJoystickAxis(SDL_Joystick* joystick, int axis) { auto _ret = SDL_GetJoystickAxis(joystick, axis); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickAxisInitialState()
inline bool GetJoystickAxisInitialState(SDL_Joystick* joystick, int axis, Sint16* state) { return SDL_GetJoystickAxisInitialState(joystick, axis, state); }

//! @copydoc SDL_GetJoystickBall()
inline bool GetJoystickBall(SDL_Joystick* joystick, int ball, int* dx, int* dy) { auto _ret = SDL_GetJoystickBall(joystick, ball, dx, dy); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickHat()
inline Uint8 GetJoystickHat(SDL_Joystick* joystick, int hat) { return SDL_GetJoystickHat(joystick, hat); }

//! @copydoc SDL_GetJoystickButton()
inline bool GetJoystickButton(SDL_Joystick* joystick, int button) { return SDL_GetJoystickButton(joystick, button); }

//! @copydoc SDL_RumbleJoystick()
inline bool RumbleJoystick(SDL_Joystick* joystick, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms) { return SDL_RumbleJoystick(joystick, low_frequency_rumble, high_frequency_rumble, duration_ms); }

//! @copydoc SDL_RumbleJoystickTriggers()
inline bool RumbleJoystickTriggers(SDL_Joystick* joystick, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms) { auto _ret = SDL_RumbleJoystickTriggers(joystick, left_rumble, right_rumble, duration_ms); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetJoystickLED()
inline bool SetJoystickLED(SDL_Joystick* joystick, Uint8 red, Uint8 green, Uint8 blue) { auto _ret = SDL_SetJoystickLED(joystick, red, green, blue); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SendJoystickEffect()
inline bool SendJoystickEffect(SDL_Joystick* joystick, const void* data, int size) { auto _ret = SDL_SendJoystickEffect(joystick, data, size); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CloseJoystick()
inline void CloseJoystick(SDL_Joystick* joystick) {  SDL_CloseJoystick(joystick); }

//! @copydoc SDL_GetJoystickConnectionState()
inline SDL_JoystickConnectionState GetJoystickConnectionState(SDL_Joystick* joystick) { auto _ret = SDL_GetJoystickConnectionState(joystick); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetJoystickPowerInfo()
inline SDL_PowerState GetJoystickPowerInfo(SDL_Joystick* joystick, int* percent) { auto _ret = SDL_GetJoystickPowerInfo(joystick, percent); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_AddGamepadMapping()
inline int AddGamepadMapping(const char* mapping) { auto _ret = SDL_AddGamepadMapping(mapping); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_AddGamepadMappingsFromIO()
inline int AddGamepadMappingsFromIO(SDL_IOStream* src, bool closeio) { auto _ret = SDL_AddGamepadMappingsFromIO(src, closeio); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_AddGamepadMappingsFromFile()
inline int AddGamepadMappingsFromFile(const char* file) { auto _ret = SDL_AddGamepadMappingsFromFile(file); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReloadGamepadMappings()
inline bool ReloadGamepadMappings() { auto _ret = SDL_ReloadGamepadMappings(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetGamepadMappings()
inline char** GetGamepadMappings(int* count) { auto _ret = SDL_GetGamepadMappings(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetGamepadMappingForGUID()
inline char* GetGamepadMappingForGUID(SDL_GUID guid) { auto _ret = SDL_GetGamepadMappingForGUID(guid); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetGamepadMapping()
inline char* GetGamepadMapping(SDL_Gamepad* gamepad) { auto _ret = SDL_GetGamepadMapping(gamepad); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetGamepadMapping()
inline bool SetGamepadMapping(SDL_JoystickID instance_id, const char* mapping) { auto _ret = SDL_SetGamepadMapping(instance_id, mapping); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_HasGamepad()
inline bool HasGamepad() { return SDL_HasGamepad(); }

//! @copydoc SDL_GetGamepads()
inline SDL_JoystickID* GetGamepads(int* count) { auto _ret = SDL_GetGamepads(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_IsGamepad()
inline bool IsGamepad(SDL_JoystickID instance_id) { return SDL_IsGamepad(instance_id); }

//! @copydoc SDL_GetGamepadNameForID()
inline const char* GetGamepadNameForID(SDL_JoystickID instance_id) { auto _ret = SDL_GetGamepadNameForID(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetGamepadPathForID()
inline const char* GetGamepadPathForID(SDL_JoystickID instance_id) { auto _ret = SDL_GetGamepadPathForID(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetGamepadPlayerIndexForID()
inline int GetGamepadPlayerIndexForID(SDL_JoystickID instance_id) { return SDL_GetGamepadPlayerIndexForID(instance_id); }

//! @copydoc SDL_GetGamepadGUIDForID()
inline SDL_GUID GetGamepadGUIDForID(SDL_JoystickID instance_id) { return SDL_GetGamepadGUIDForID(instance_id); }

//! @copydoc SDL_GetGamepadVendorForID()
inline Uint16 GetGamepadVendorForID(SDL_JoystickID instance_id) { return SDL_GetGamepadVendorForID(instance_id); }

//! @copydoc SDL_GetGamepadProductForID()
inline Uint16 GetGamepadProductForID(SDL_JoystickID instance_id) { return SDL_GetGamepadProductForID(instance_id); }

//! @copydoc SDL_GetGamepadProductVersionForID()
inline Uint16 GetGamepadProductVersionForID(SDL_JoystickID instance_id) { return SDL_GetGamepadProductVersionForID(instance_id); }

//! @copydoc SDL_GetGamepadTypeForID()
inline SDL_GamepadType GetGamepadTypeForID(SDL_JoystickID instance_id) { return SDL_GetGamepadTypeForID(instance_id); }

//! @copydoc SDL_GetRealGamepadTypeForID()
inline SDL_GamepadType GetRealGamepadTypeForID(SDL_JoystickID instance_id) { return SDL_GetRealGamepadTypeForID(instance_id); }

//! @copydoc SDL_GetGamepadMappingForID()
inline char* GetGamepadMappingForID(SDL_JoystickID instance_id) { return SDL_GetGamepadMappingForID(instance_id); }

//! @copydoc SDL_OpenGamepad()
inline SDL_Gamepad* OpenGamepad(SDL_JoystickID instance_id) { auto _ret = SDL_OpenGamepad(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetGamepadFromID()
inline SDL_Gamepad* GetGamepadFromID(SDL_JoystickID instance_id) { auto _ret = SDL_GetGamepadFromID(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetGamepadFromPlayerIndex()
inline SDL_Gamepad* GetGamepadFromPlayerIndex(int player_index) { return SDL_GetGamepadFromPlayerIndex(player_index); }

//! @copydoc SDL_GetGamepadProperties()
inline SDL_PropertiesID GetGamepadProperties(SDL_Gamepad* gamepad) { auto _ret = SDL_GetGamepadProperties(gamepad); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetGamepadID()
inline SDL_JoystickID GetGamepadID(SDL_Gamepad* gamepad) { auto _ret = SDL_GetGamepadID(gamepad); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetGamepadName()
inline const char* GetGamepadName(SDL_Gamepad* gamepad) { return SDL_GetGamepadName(gamepad); }

//! @copydoc SDL_GetGamepadPath()
inline const char* GetGamepadPath(SDL_Gamepad* gamepad) { return SDL_GetGamepadPath(gamepad); }

//! @copydoc SDL_GetGamepadType()
inline SDL_GamepadType GetGamepadType(SDL_Gamepad* gamepad) { return SDL_GetGamepadType(gamepad); }

//! @copydoc SDL_GetRealGamepadType()
inline SDL_GamepadType GetRealGamepadType(SDL_Gamepad* gamepad) { return SDL_GetRealGamepadType(gamepad); }

//! @copydoc SDL_GetGamepadPlayerIndex()
inline int GetGamepadPlayerIndex(SDL_Gamepad* gamepad) { return SDL_GetGamepadPlayerIndex(gamepad); }

//! @copydoc SDL_SetGamepadPlayerIndex()
inline bool SetGamepadPlayerIndex(SDL_Gamepad* gamepad, int player_index) { auto _ret = SDL_SetGamepadPlayerIndex(gamepad, player_index); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetGamepadVendor()
inline Uint16 GetGamepadVendor(SDL_Gamepad* gamepad) { return SDL_GetGamepadVendor(gamepad); }

//! @copydoc SDL_GetGamepadProduct()
inline Uint16 GetGamepadProduct(SDL_Gamepad* gamepad) { return SDL_GetGamepadProduct(gamepad); }

//! @copydoc SDL_GetGamepadProductVersion()
inline Uint16 GetGamepadProductVersion(SDL_Gamepad* gamepad) { return SDL_GetGamepadProductVersion(gamepad); }

//! @copydoc SDL_GetGamepadFirmwareVersion()
inline Uint16 GetGamepadFirmwareVersion(SDL_Gamepad* gamepad) { return SDL_GetGamepadFirmwareVersion(gamepad); }

//! @copydoc SDL_GetGamepadSerial()
inline const char* GetGamepadSerial(SDL_Gamepad* gamepad) { return SDL_GetGamepadSerial(gamepad); }

//! @copydoc SDL_GetGamepadSteamHandle()
inline Uint64 GetGamepadSteamHandle(SDL_Gamepad* gamepad) { return SDL_GetGamepadSteamHandle(gamepad); }

//! @copydoc SDL_GetGamepadConnectionState()
inline SDL_JoystickConnectionState GetGamepadConnectionState(SDL_Gamepad* gamepad) { auto _ret = SDL_GetGamepadConnectionState(gamepad); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetGamepadPowerInfo()
inline SDL_PowerState GetGamepadPowerInfo(SDL_Gamepad* gamepad, int* percent) { return SDL_GetGamepadPowerInfo(gamepad, percent); }

//! @copydoc SDL_GamepadConnected()
inline bool GamepadConnected(SDL_Gamepad* gamepad) { return SDL_GamepadConnected(gamepad); }

//! @copydoc SDL_GetGamepadJoystick()
inline SDL_Joystick* GetGamepadJoystick(SDL_Gamepad* gamepad) { auto _ret = SDL_GetGamepadJoystick(gamepad); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetGamepadEventsEnabled()
inline void SetGamepadEventsEnabled(bool enabled) {  SDL_SetGamepadEventsEnabled(enabled); }

//! @copydoc SDL_GamepadEventsEnabled()
inline bool GamepadEventsEnabled() { return SDL_GamepadEventsEnabled(); }

//! @copydoc SDL_GetGamepadBindings()
inline SDL_GamepadBinding** GetGamepadBindings(SDL_Gamepad* gamepad, int* count) { auto _ret = SDL_GetGamepadBindings(gamepad, count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UpdateGamepads()
inline void UpdateGamepads() {  SDL_UpdateGamepads(); }

//! @copydoc SDL_GetGamepadTypeFromString()
inline SDL_GamepadType GetGamepadTypeFromString(const char* str) { return SDL_GetGamepadTypeFromString(str); }

//! @copydoc SDL_GetGamepadStringForType()
inline const char* GetGamepadStringForType(SDL_GamepadType type) { return SDL_GetGamepadStringForType(type); }

//! @copydoc SDL_GetGamepadAxisFromString()
inline SDL_GamepadAxis GetGamepadAxisFromString(const char* str) { return SDL_GetGamepadAxisFromString(str); }

//! @copydoc SDL_GetGamepadStringForAxis()
inline const char* GetGamepadStringForAxis(SDL_GamepadAxis axis) { return SDL_GetGamepadStringForAxis(axis); }

//! @copydoc SDL_GamepadHasAxis()
inline bool GamepadHasAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis) { return SDL_GamepadHasAxis(gamepad, axis); }

//! @copydoc SDL_GetGamepadAxis()
inline Sint16 GetGamepadAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis) { auto _ret = SDL_GetGamepadAxis(gamepad, axis); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetGamepadButtonFromString()
inline SDL_GamepadButton GetGamepadButtonFromString(const char* str) { return SDL_GetGamepadButtonFromString(str); }

//! @copydoc SDL_GetGamepadStringForButton()
inline const char* GetGamepadStringForButton(SDL_GamepadButton button) { return SDL_GetGamepadStringForButton(button); }

//! @copydoc SDL_GamepadHasButton()
inline bool GamepadHasButton(SDL_Gamepad* gamepad, SDL_GamepadButton button) { return SDL_GamepadHasButton(gamepad, button); }

//! @copydoc SDL_GetGamepadButton()
inline bool GetGamepadButton(SDL_Gamepad* gamepad, SDL_GamepadButton button) { return SDL_GetGamepadButton(gamepad, button); }

//! @copydoc SDL_GetGamepadButtonLabelForType()
inline SDL_GamepadButtonLabel GetGamepadButtonLabelForType(SDL_GamepadType type, SDL_GamepadButton button) { return SDL_GetGamepadButtonLabelForType(type, button); }

//! @copydoc SDL_GetGamepadButtonLabel()
inline SDL_GamepadButtonLabel GetGamepadButtonLabel(SDL_Gamepad* gamepad, SDL_GamepadButton button) { return SDL_GetGamepadButtonLabel(gamepad, button); }

//! @copydoc SDL_GetNumGamepadTouchpads()
inline int GetNumGamepadTouchpads(SDL_Gamepad* gamepad) { return SDL_GetNumGamepadTouchpads(gamepad); }

//! @copydoc SDL_GetNumGamepadTouchpadFingers()
inline int GetNumGamepadTouchpadFingers(SDL_Gamepad* gamepad, int touchpad) { return SDL_GetNumGamepadTouchpadFingers(gamepad, touchpad); }

//! @copydoc SDL_GetGamepadTouchpadFinger()
inline bool GetGamepadTouchpadFinger(SDL_Gamepad* gamepad, int touchpad, int finger, bool* down, float* x, float* y, float* pressure) { auto _ret = SDL_GetGamepadTouchpadFinger(gamepad, touchpad, finger, down, x, y, pressure); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GamepadHasSensor()
inline bool GamepadHasSensor(SDL_Gamepad* gamepad, SDL_SensorType type) { return SDL_GamepadHasSensor(gamepad, type); }

//! @copydoc SDL_SetGamepadSensorEnabled()
inline bool SetGamepadSensorEnabled(SDL_Gamepad* gamepad, SDL_SensorType type, bool enabled) { auto _ret = SDL_SetGamepadSensorEnabled(gamepad, type, enabled); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GamepadSensorEnabled()
inline bool GamepadSensorEnabled(SDL_Gamepad* gamepad, SDL_SensorType type) { return SDL_GamepadSensorEnabled(gamepad, type); }

//! @copydoc SDL_GetGamepadSensorDataRate()
inline float GetGamepadSensorDataRate(SDL_Gamepad* gamepad, SDL_SensorType type) { return SDL_GetGamepadSensorDataRate(gamepad, type); }

//! @copydoc SDL_GetGamepadSensorData()
inline bool GetGamepadSensorData(SDL_Gamepad* gamepad, SDL_SensorType type, float* data, int num_values) { auto _ret = SDL_GetGamepadSensorData(gamepad, type, data, num_values); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RumbleGamepad()
inline bool RumbleGamepad(SDL_Gamepad* gamepad, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms) { auto _ret = SDL_RumbleGamepad(gamepad, low_frequency_rumble, high_frequency_rumble, duration_ms); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RumbleGamepadTriggers()
inline bool RumbleGamepadTriggers(SDL_Gamepad* gamepad, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms) { auto _ret = SDL_RumbleGamepadTriggers(gamepad, left_rumble, right_rumble, duration_ms); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetGamepadLED()
inline bool SetGamepadLED(SDL_Gamepad* gamepad, Uint8 red, Uint8 green, Uint8 blue) { auto _ret = SDL_SetGamepadLED(gamepad, red, green, blue); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SendGamepadEffect()
inline bool SendGamepadEffect(SDL_Gamepad* gamepad, const void* data, int size) { auto _ret = SDL_SendGamepadEffect(gamepad, data, size); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CloseGamepad()
inline void CloseGamepad(SDL_Gamepad* gamepad) {  SDL_CloseGamepad(gamepad); }

//! @copydoc SDL_GetGamepadAppleSFSymbolsNameForButton()
inline const char* GetGamepadAppleSFSymbolsNameForButton(SDL_Gamepad* gamepad, SDL_GamepadButton button) { return SDL_GetGamepadAppleSFSymbolsNameForButton(gamepad, button); }

//! @copydoc SDL_GetGamepadAppleSFSymbolsNameForAxis()
inline const char* GetGamepadAppleSFSymbolsNameForAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis) { return SDL_GetGamepadAppleSFSymbolsNameForAxis(gamepad, axis); }

//! @copydoc SDL_HasKeyboard()
inline bool HasKeyboard() { return SDL_HasKeyboard(); }

//! @copydoc SDL_GetKeyboards()
inline SDL_KeyboardID* GetKeyboards(int* count) { auto _ret = SDL_GetKeyboards(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetKeyboardNameForID()
inline const char* GetKeyboardNameForID(SDL_KeyboardID instance_id) { auto _ret = SDL_GetKeyboardNameForID(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetKeyboardFocus()
inline SDL_Window* GetKeyboardFocus() { return SDL_GetKeyboardFocus(); }

//! @copydoc SDL_GetKeyboardState()
inline const bool* GetKeyboardState(int* numkeys) { return SDL_GetKeyboardState(numkeys); }

//! @copydoc SDL_ResetKeyboard()
inline void ResetKeyboard() {  SDL_ResetKeyboard(); }

//! @copydoc SDL_GetModState()
inline SDL_Keymod GetModState() { return SDL_GetModState(); }

//! @copydoc SDL_SetModState()
inline void SetModState(SDL_Keymod modstate) {  SDL_SetModState(modstate); }

//! @copydoc SDL_GetKeyFromScancode()
inline SDL_Keycode GetKeyFromScancode(SDL_Scancode scancode, SDL_Keymod modstate, bool key_event) { return SDL_GetKeyFromScancode(scancode, modstate, key_event); }

//! @copydoc SDL_GetScancodeFromKey()
inline SDL_Scancode GetScancodeFromKey(SDL_Keycode key, SDL_Keymod* modstate) { return SDL_GetScancodeFromKey(key, modstate); }

//! @copydoc SDL_SetScancodeName()
inline bool SetScancodeName(SDL_Scancode scancode, const char* name) { auto _ret = SDL_SetScancodeName(scancode, name); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetScancodeName()
inline const char* GetScancodeName(SDL_Scancode scancode) { return SDL_GetScancodeName(scancode); }

//! @copydoc SDL_GetScancodeFromName()
inline SDL_Scancode GetScancodeFromName(const char* name) { auto _ret = SDL_GetScancodeFromName(name); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetKeyName()
inline const char* GetKeyName(SDL_Keycode key) { return SDL_GetKeyName(key); }

//! @copydoc SDL_GetKeyFromName()
inline SDL_Keycode GetKeyFromName(const char* name) { auto _ret = SDL_GetKeyFromName(name); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_StartTextInput()
inline bool StartTextInput(SDL_Window* window) { auto _ret = SDL_StartTextInput(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_StartTextInputWithProperties()
inline bool StartTextInputWithProperties(SDL_Window* window, SDL_PropertiesID props) { auto _ret = SDL_StartTextInputWithProperties(window, props); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_TextInputActive()
inline bool TextInputActive(SDL_Window* window) { return SDL_TextInputActive(window); }

//! @copydoc SDL_StopTextInput()
inline bool StopTextInput(SDL_Window* window) { auto _ret = SDL_StopTextInput(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ClearComposition()
inline bool ClearComposition(SDL_Window* window) { auto _ret = SDL_ClearComposition(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetTextInputArea()
inline bool SetTextInputArea(SDL_Window* window, const SDL_Rect* rect, int cursor) { auto _ret = SDL_SetTextInputArea(window, rect, cursor); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetTextInputArea()
inline bool GetTextInputArea(SDL_Window* window, SDL_Rect* rect, int* cursor) { auto _ret = SDL_GetTextInputArea(window, rect, cursor); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_HasScreenKeyboardSupport()
inline bool HasScreenKeyboardSupport() { return SDL_HasScreenKeyboardSupport(); }

//! @copydoc SDL_ScreenKeyboardShown()
inline bool ScreenKeyboardShown(SDL_Window* window) { return SDL_ScreenKeyboardShown(window); }

//! @copydoc SDL_HasMouse()
inline bool HasMouse() { return SDL_HasMouse(); }

//! @copydoc SDL_GetMice()
inline SDL_MouseID* GetMice(int* count) { auto _ret = SDL_GetMice(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetMouseNameForID()
inline const char* GetMouseNameForID(SDL_MouseID instance_id) { auto _ret = SDL_GetMouseNameForID(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetMouseFocus()
inline SDL_Window* GetMouseFocus() { return SDL_GetMouseFocus(); }

//! @copydoc SDL_GetMouseState()
inline SDL_MouseButtonFlags GetMouseState(float* x, float* y) { return SDL_GetMouseState(x, y); }

//! @copydoc SDL_GetGlobalMouseState()
inline SDL_MouseButtonFlags GetGlobalMouseState(float* x, float* y) { return SDL_GetGlobalMouseState(x, y); }

//! @copydoc SDL_GetRelativeMouseState()
inline SDL_MouseButtonFlags GetRelativeMouseState(float* x, float* y) { return SDL_GetRelativeMouseState(x, y); }

//! @copydoc SDL_WarpMouseInWindow()
inline void WarpMouseInWindow(SDL_Window* window, float x, float y) {  SDL_WarpMouseInWindow(window, x, y); }

//! @copydoc SDL_WarpMouseGlobal()
inline bool WarpMouseGlobal(float x, float y) { auto _ret = SDL_WarpMouseGlobal(x, y); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetWindowRelativeMouseMode()
inline bool SetWindowRelativeMouseMode(SDL_Window* window, bool enabled) { auto _ret = SDL_SetWindowRelativeMouseMode(window, enabled); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetWindowRelativeMouseMode()
inline bool GetWindowRelativeMouseMode(SDL_Window* window) { return SDL_GetWindowRelativeMouseMode(window); }

//! @copydoc SDL_CaptureMouse()
inline bool CaptureMouse(bool enabled) { auto _ret = SDL_CaptureMouse(enabled); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateCursor()
inline SDL_Cursor* CreateCursor(const Uint8* data, const Uint8* mask, int w, int h, int hot_x, int hot_y) { auto _ret = SDL_CreateCursor(data, mask, w, h, hot_x, hot_y); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateColorCursor()
inline SDL_Cursor* CreateColorCursor(SDL_Surface* surface, int hot_x, int hot_y) { auto _ret = SDL_CreateColorCursor(surface, hot_x, hot_y); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateSystemCursor()
inline SDL_Cursor* CreateSystemCursor(SDL_SystemCursor id) { auto _ret = SDL_CreateSystemCursor(id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetCursor()
inline bool SetCursor(SDL_Cursor* cursor) { auto _ret = SDL_SetCursor(cursor); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetCursor()
inline SDL_Cursor* GetCursor() { return SDL_GetCursor(); }

//! @copydoc SDL_GetDefaultCursor()
inline SDL_Cursor* GetDefaultCursor() { auto _ret = SDL_GetDefaultCursor(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroyCursor()
inline void DestroyCursor(SDL_Cursor* cursor) {  SDL_DestroyCursor(cursor); }

//! @copydoc SDL_ShowCursor()
inline bool ShowCursor() { auto _ret = SDL_ShowCursor(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_HideCursor()
inline bool HideCursor() { auto _ret = SDL_HideCursor(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CursorVisible()
inline bool CursorVisible() { return SDL_CursorVisible(); }

//! @copydoc SDL_GetTouchDevices()
inline SDL_TouchID* GetTouchDevices(int* count) { auto _ret = SDL_GetTouchDevices(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetTouchDeviceName()
inline const char* GetTouchDeviceName(SDL_TouchID touchID) { auto _ret = SDL_GetTouchDeviceName(touchID); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetTouchDeviceType()
inline SDL_TouchDeviceType GetTouchDeviceType(SDL_TouchID touchID) { return SDL_GetTouchDeviceType(touchID); }

//! @copydoc SDL_GetTouchFingers()
inline SDL_Finger** GetTouchFingers(SDL_TouchID touchID, int* count) { auto _ret = SDL_GetTouchFingers(touchID, count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_PumpEvents()
inline void PumpEvents() {  SDL_PumpEvents(); }

//! @copydoc SDL_PeepEvents()
inline int PeepEvents(SDL_Event* events, int numevents, SDL_EventAction action, Uint32 minType, Uint32 maxType) { auto _ret = SDL_PeepEvents(events, numevents, action, minType, maxType); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_HasEvent()
inline bool HasEvent(Uint32 type) { return SDL_HasEvent(type); }

//! @copydoc SDL_HasEvents()
inline bool HasEvents(Uint32 minType, Uint32 maxType) { return SDL_HasEvents(minType, maxType); }

//! @copydoc SDL_FlushEvent()
inline void FlushEvent(Uint32 type) {  SDL_FlushEvent(type); }

//! @copydoc SDL_FlushEvents()
inline void FlushEvents(Uint32 minType, Uint32 maxType) {  SDL_FlushEvents(minType, maxType); }

//! @copydoc SDL_PollEvent()
inline bool PollEvent(SDL_Event* event) { return SDL_PollEvent(event); }

//! @copydoc SDL_WaitEvent()
inline bool WaitEvent(SDL_Event* event) { auto _ret = SDL_WaitEvent(event); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WaitEventTimeout()
inline bool WaitEventTimeout(SDL_Event* event, Sint32 timeoutMS) { return SDL_WaitEventTimeout(event, timeoutMS); }

//! @copydoc SDL_PushEvent()
inline bool PushEvent(SDL_Event* event) { auto _ret = SDL_PushEvent(event); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetEventFilter()
inline void SetEventFilter(SDL_EventFilter filter, void* userdata) {  SDL_SetEventFilter(filter, userdata); }

//! @copydoc SDL_GetEventFilter()
inline bool GetEventFilter(SDL_EventFilter* filter, void** userdata) { return SDL_GetEventFilter(filter, userdata); }

//! @copydoc SDL_AddEventWatch()
inline bool AddEventWatch(SDL_EventFilter filter, void* userdata) { auto _ret = SDL_AddEventWatch(filter, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RemoveEventWatch()
inline void RemoveEventWatch(SDL_EventFilter filter, void* userdata) {  SDL_RemoveEventWatch(filter, userdata); }

//! @copydoc SDL_FilterEvents()
inline void FilterEvents(SDL_EventFilter filter, void* userdata) {  SDL_FilterEvents(filter, userdata); }

//! @copydoc SDL_SetEventEnabled()
inline void SetEventEnabled(Uint32 type, bool enabled) {  SDL_SetEventEnabled(type, enabled); }

//! @copydoc SDL_EventEnabled()
inline bool EventEnabled(Uint32 type) { return SDL_EventEnabled(type); }

//! @copydoc SDL_RegisterEvents()
inline Uint32 RegisterEvents(int numevents) { return SDL_RegisterEvents(numevents); }

//! @copydoc SDL_GetWindowFromEvent()
inline SDL_Window* GetWindowFromEvent(const SDL_Event* event) { return SDL_GetWindowFromEvent(event); }

//! @copydoc SDL_GetBasePath()
inline const char* GetBasePath() { auto _ret = SDL_GetBasePath(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetPrefPath()
inline char* GetPrefPath(const char* org, const char* app) { return SDL_GetPrefPath(org, app); }

//! @copydoc SDL_GetUserFolder()
inline const char* GetUserFolder(SDL_Folder folder) { auto _ret = SDL_GetUserFolder(folder); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateDirectory()
inline bool CreateDirectory(const char* path) { auto _ret = SDL_CreateDirectory(path); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_EnumerateDirectory()
inline bool EnumerateDirectory(const char* path, SDL_EnumerateDirectoryCallback callback, void* userdata) { auto _ret = SDL_EnumerateDirectory(path, callback, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RemovePath()
inline bool RemovePath(const char* path) { auto _ret = SDL_RemovePath(path); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenamePath()
inline bool RenamePath(const char* oldpath, const char* newpath) { auto _ret = SDL_RenamePath(oldpath, newpath); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CopyFile()
inline bool CopyFile(const char* oldpath, const char* newpath) { auto _ret = SDL_CopyFile(oldpath, newpath); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetPathInfo()
inline bool GetPathInfo(const char* path, SDL_PathInfo* info) { auto _ret = SDL_GetPathInfo(path, info); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GlobDirectory()
inline char** GlobDirectory(const char* path, const char* pattern, SDL::GlobFlags flags, int* count) { auto _ret = SDL_GlobDirectory(path, pattern, flags, count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetCurrentDirectory()
inline char* GetCurrentDirectory() { return SDL_GetCurrentDirectory(); }

//! @copydoc SDL_GPUSupportsShaderFormats()
inline bool GPUSupportsShaderFormats(SDL_GPUShaderFormat format_flags, const char* name) { return SDL_GPUSupportsShaderFormats(format_flags, name); }

//! @copydoc SDL_GPUSupportsProperties()
inline bool GPUSupportsProperties(SDL_PropertiesID props) { return SDL_GPUSupportsProperties(props); }

//! @copydoc SDL_CreateGPUDevice()
inline SDL_GPUDevice* CreateGPUDevice(SDL_GPUShaderFormat format_flags, bool debug_mode, const char* name) { auto _ret = SDL_CreateGPUDevice(format_flags, debug_mode, name); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateGPUDeviceWithProperties()
inline SDL_GPUDevice* CreateGPUDeviceWithProperties(SDL_PropertiesID props) { auto _ret = SDL_CreateGPUDeviceWithProperties(props); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroyGPUDevice()
inline void DestroyGPUDevice(SDL_GPUDevice* device) {  SDL_DestroyGPUDevice(device); }

//! @copydoc SDL_GetNumGPUDrivers()
inline int GetNumGPUDrivers() { return SDL_GetNumGPUDrivers(); }

//! @copydoc SDL_GetGPUDriver()
inline const char* GetGPUDriver(int index) { return SDL_GetGPUDriver(index); }

//! @copydoc SDL_GetGPUDeviceDriver()
inline const char* GetGPUDeviceDriver(SDL_GPUDevice* device) { return SDL_GetGPUDeviceDriver(device); }

//! @copydoc SDL_GetGPUShaderFormats()
inline SDL_GPUShaderFormat GetGPUShaderFormats(SDL_GPUDevice* device) { return SDL_GetGPUShaderFormats(device); }

//! @copydoc SDL_CreateGPUComputePipeline()
inline SDL_GPUComputePipeline* CreateGPUComputePipeline(SDL_GPUDevice* device, const SDL_GPUComputePipelineCreateInfo* createinfo) { auto _ret = SDL_CreateGPUComputePipeline(device, createinfo); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateGPUGraphicsPipeline()
inline SDL_GPUGraphicsPipeline* CreateGPUGraphicsPipeline(SDL_GPUDevice* device, const SDL_GPUGraphicsPipelineCreateInfo* createinfo) { auto _ret = SDL_CreateGPUGraphicsPipeline(device, createinfo); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateGPUSampler()
inline SDL_GPUSampler* CreateGPUSampler(SDL_GPUDevice* device, const SDL_GPUSamplerCreateInfo* createinfo) { auto _ret = SDL_CreateGPUSampler(device, createinfo); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateGPUShader()
inline SDL_GPUShader* CreateGPUShader(SDL_GPUDevice* device, const SDL_GPUShaderCreateInfo* createinfo) { auto _ret = SDL_CreateGPUShader(device, createinfo); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateGPUTexture()
inline SDL_GPUTexture* CreateGPUTexture(SDL_GPUDevice* device, const SDL_GPUTextureCreateInfo* createinfo) { auto _ret = SDL_CreateGPUTexture(device, createinfo); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateGPUBuffer()
inline SDL_GPUBuffer* CreateGPUBuffer(SDL_GPUDevice* device, const SDL_GPUBufferCreateInfo* createinfo) { auto _ret = SDL_CreateGPUBuffer(device, createinfo); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateGPUTransferBuffer()
inline SDL_GPUTransferBuffer* CreateGPUTransferBuffer(SDL_GPUDevice* device, const SDL_GPUTransferBufferCreateInfo* createinfo) { auto _ret = SDL_CreateGPUTransferBuffer(device, createinfo); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetGPUBufferName()
inline void SetGPUBufferName(SDL_GPUDevice* device, SDL_GPUBuffer* buffer, const char* text) {  SDL_SetGPUBufferName(device, buffer, text); }

//! @copydoc SDL_SetGPUTextureName()
inline void SetGPUTextureName(SDL_GPUDevice* device, SDL_GPUTexture* texture, const char* text) {  SDL_SetGPUTextureName(device, texture, text); }

//! @copydoc SDL_InsertGPUDebugLabel()
inline void InsertGPUDebugLabel(SDL_GPUCommandBuffer* command_buffer, const char* text) {  SDL_InsertGPUDebugLabel(command_buffer, text); }

//! @copydoc SDL_PushGPUDebugGroup()
inline void PushGPUDebugGroup(SDL_GPUCommandBuffer* command_buffer, const char* name) {  SDL_PushGPUDebugGroup(command_buffer, name); }

//! @copydoc SDL_PopGPUDebugGroup()
inline void PopGPUDebugGroup(SDL_GPUCommandBuffer* command_buffer) {  SDL_PopGPUDebugGroup(command_buffer); }

//! @copydoc SDL_ReleaseGPUTexture()
inline void ReleaseGPUTexture(SDL_GPUDevice* device, SDL_GPUTexture* texture) {  SDL_ReleaseGPUTexture(device, texture); }

//! @copydoc SDL_ReleaseGPUSampler()
inline void ReleaseGPUSampler(SDL_GPUDevice* device, SDL_GPUSampler* sampler) {  SDL_ReleaseGPUSampler(device, sampler); }

//! @copydoc SDL_ReleaseGPUBuffer()
inline void ReleaseGPUBuffer(SDL_GPUDevice* device, SDL_GPUBuffer* buffer) {  SDL_ReleaseGPUBuffer(device, buffer); }

//! @copydoc SDL_ReleaseGPUTransferBuffer()
inline void ReleaseGPUTransferBuffer(SDL_GPUDevice* device, SDL_GPUTransferBuffer* transfer_buffer) {  SDL_ReleaseGPUTransferBuffer(device, transfer_buffer); }

//! @copydoc SDL_ReleaseGPUComputePipeline()
inline void ReleaseGPUComputePipeline(SDL_GPUDevice* device, SDL_GPUComputePipeline* compute_pipeline) {  SDL_ReleaseGPUComputePipeline(device, compute_pipeline); }

//! @copydoc SDL_ReleaseGPUShader()
inline void ReleaseGPUShader(SDL_GPUDevice* device, SDL_GPUShader* shader) {  SDL_ReleaseGPUShader(device, shader); }

//! @copydoc SDL_ReleaseGPUGraphicsPipeline()
inline void ReleaseGPUGraphicsPipeline(SDL_GPUDevice* device, SDL_GPUGraphicsPipeline* graphics_pipeline) {  SDL_ReleaseGPUGraphicsPipeline(device, graphics_pipeline); }

//! @copydoc SDL_AcquireGPUCommandBuffer()
inline SDL_GPUCommandBuffer* AcquireGPUCommandBuffer(SDL_GPUDevice* device) { auto _ret = SDL_AcquireGPUCommandBuffer(device); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_PushGPUVertexUniformData()
inline void PushGPUVertexUniformData(SDL_GPUCommandBuffer* command_buffer, Uint32 slot_index, const void* data, Uint32 length) {  SDL_PushGPUVertexUniformData(command_buffer, slot_index, data, length); }

//! @copydoc SDL_PushGPUFragmentUniformData()
inline void PushGPUFragmentUniformData(SDL_GPUCommandBuffer* command_buffer, Uint32 slot_index, const void* data, Uint32 length) {  SDL_PushGPUFragmentUniformData(command_buffer, slot_index, data, length); }

//! @copydoc SDL_PushGPUComputeUniformData()
inline void PushGPUComputeUniformData(SDL_GPUCommandBuffer* command_buffer, Uint32 slot_index, const void* data, Uint32 length) {  SDL_PushGPUComputeUniformData(command_buffer, slot_index, data, length); }

//! @copydoc SDL_BeginGPURenderPass()
inline SDL_GPURenderPass* BeginGPURenderPass(SDL_GPUCommandBuffer* command_buffer, const SDL_GPUColorTargetInfo* color_target_infos, Uint32 num_color_targets, const SDL_GPUDepthStencilTargetInfo* depth_stencil_target_info) { return SDL_BeginGPURenderPass(command_buffer, color_target_infos, num_color_targets, depth_stencil_target_info); }

//! @copydoc SDL_BindGPUGraphicsPipeline()
inline void BindGPUGraphicsPipeline(SDL_GPURenderPass* render_pass, SDL_GPUGraphicsPipeline* graphics_pipeline) {  SDL_BindGPUGraphicsPipeline(render_pass, graphics_pipeline); }

//! @copydoc SDL_SetGPUViewport()
inline void SetGPUViewport(SDL_GPURenderPass* render_pass, const SDL_GPUViewport* viewport) {  SDL_SetGPUViewport(render_pass, viewport); }

//! @copydoc SDL_SetGPUScissor()
inline void SetGPUScissor(SDL_GPURenderPass* render_pass, const SDL_Rect* scissor) {  SDL_SetGPUScissor(render_pass, scissor); }

//! @copydoc SDL_SetGPUBlendConstants()
inline void SetGPUBlendConstants(SDL_GPURenderPass* render_pass, SDL_FColor blend_constants) {  SDL_SetGPUBlendConstants(render_pass, blend_constants); }

//! @copydoc SDL_SetGPUStencilReference()
inline void SetGPUStencilReference(SDL_GPURenderPass* render_pass, Uint8 reference) {  SDL_SetGPUStencilReference(render_pass, reference); }

//! @copydoc SDL_BindGPUVertexBuffers()
inline void BindGPUVertexBuffers(SDL_GPURenderPass* render_pass, Uint32 first_slot, const SDL_GPUBufferBinding* bindings, Uint32 num_bindings) {  SDL_BindGPUVertexBuffers(render_pass, first_slot, bindings, num_bindings); }

//! @copydoc SDL_BindGPUIndexBuffer()
inline void BindGPUIndexBuffer(SDL_GPURenderPass* render_pass, const SDL_GPUBufferBinding* binding, SDL_GPUIndexElementSize index_element_size) {  SDL_BindGPUIndexBuffer(render_pass, binding, index_element_size); }

//! @copydoc SDL_BindGPUVertexSamplers()
inline void BindGPUVertexSamplers(SDL_GPURenderPass* render_pass, Uint32 first_slot, const SDL_GPUTextureSamplerBinding* texture_sampler_bindings, Uint32 num_bindings) {  SDL_BindGPUVertexSamplers(render_pass, first_slot, texture_sampler_bindings, num_bindings); }

//! @copydoc SDL_BindGPUVertexStorageTextures()
inline void BindGPUVertexStorageTextures(SDL_GPURenderPass* render_pass, Uint32 first_slot, SDL_GPUTexture** storage_textures, Uint32 num_bindings) {  SDL_BindGPUVertexStorageTextures(render_pass, first_slot, storage_textures, num_bindings); }

//! @copydoc SDL_BindGPUVertexStorageBuffers()
inline void BindGPUVertexStorageBuffers(SDL_GPURenderPass* render_pass, Uint32 first_slot, SDL_GPUBuffer** storage_buffers, Uint32 num_bindings) {  SDL_BindGPUVertexStorageBuffers(render_pass, first_slot, storage_buffers, num_bindings); }

//! @copydoc SDL_BindGPUFragmentSamplers()
inline void BindGPUFragmentSamplers(SDL_GPURenderPass* render_pass, Uint32 first_slot, const SDL_GPUTextureSamplerBinding* texture_sampler_bindings, Uint32 num_bindings) {  SDL_BindGPUFragmentSamplers(render_pass, first_slot, texture_sampler_bindings, num_bindings); }

//! @copydoc SDL_BindGPUFragmentStorageTextures()
inline void BindGPUFragmentStorageTextures(SDL_GPURenderPass* render_pass, Uint32 first_slot, SDL_GPUTexture** storage_textures, Uint32 num_bindings) {  SDL_BindGPUFragmentStorageTextures(render_pass, first_slot, storage_textures, num_bindings); }

//! @copydoc SDL_BindGPUFragmentStorageBuffers()
inline void BindGPUFragmentStorageBuffers(SDL_GPURenderPass* render_pass, Uint32 first_slot, SDL_GPUBuffer** storage_buffers, Uint32 num_bindings) {  SDL_BindGPUFragmentStorageBuffers(render_pass, first_slot, storage_buffers, num_bindings); }

//! @copydoc SDL_DrawGPUIndexedPrimitives()
inline void DrawGPUIndexedPrimitives(SDL_GPURenderPass* render_pass, Uint32 num_indices, Uint32 num_instances, Uint32 first_index, Sint32 vertex_offset, Uint32 first_instance) {  SDL_DrawGPUIndexedPrimitives(render_pass, num_indices, num_instances, first_index, vertex_offset, first_instance); }

//! @copydoc SDL_DrawGPUPrimitives()
inline void DrawGPUPrimitives(SDL_GPURenderPass* render_pass, Uint32 num_vertices, Uint32 num_instances, Uint32 first_vertex, Uint32 first_instance) {  SDL_DrawGPUPrimitives(render_pass, num_vertices, num_instances, first_vertex, first_instance); }

//! @copydoc SDL_DrawGPUPrimitivesIndirect()
inline void DrawGPUPrimitivesIndirect(SDL_GPURenderPass* render_pass, SDL_GPUBuffer* buffer, Uint32 offset, Uint32 draw_count) {  SDL_DrawGPUPrimitivesIndirect(render_pass, buffer, offset, draw_count); }

//! @copydoc SDL_DrawGPUIndexedPrimitivesIndirect()
inline void DrawGPUIndexedPrimitivesIndirect(SDL_GPURenderPass* render_pass, SDL_GPUBuffer* buffer, Uint32 offset, Uint32 draw_count) {  SDL_DrawGPUIndexedPrimitivesIndirect(render_pass, buffer, offset, draw_count); }

//! @copydoc SDL_EndGPURenderPass()
inline void EndGPURenderPass(SDL_GPURenderPass* render_pass) {  SDL_EndGPURenderPass(render_pass); }

//! @copydoc SDL_BeginGPUComputePass()
inline SDL_GPUComputePass* BeginGPUComputePass(SDL_GPUCommandBuffer* command_buffer, const SDL_GPUStorageTextureReadWriteBinding* storage_texture_bindings, Uint32 num_storage_texture_bindings, const SDL_GPUStorageBufferReadWriteBinding* storage_buffer_bindings, Uint32 num_storage_buffer_bindings) { return SDL_BeginGPUComputePass(command_buffer, storage_texture_bindings, num_storage_texture_bindings, storage_buffer_bindings, num_storage_buffer_bindings); }

//! @copydoc SDL_BindGPUComputePipeline()
inline void BindGPUComputePipeline(SDL_GPUComputePass* compute_pass, SDL_GPUComputePipeline* compute_pipeline) {  SDL_BindGPUComputePipeline(compute_pass, compute_pipeline); }

//! @copydoc SDL_BindGPUComputeSamplers()
inline void BindGPUComputeSamplers(SDL_GPUComputePass* compute_pass, Uint32 first_slot, const SDL_GPUTextureSamplerBinding* texture_sampler_bindings, Uint32 num_bindings) {  SDL_BindGPUComputeSamplers(compute_pass, first_slot, texture_sampler_bindings, num_bindings); }

//! @copydoc SDL_BindGPUComputeStorageTextures()
inline void BindGPUComputeStorageTextures(SDL_GPUComputePass* compute_pass, Uint32 first_slot, SDL_GPUTexture** storage_textures, Uint32 num_bindings) {  SDL_BindGPUComputeStorageTextures(compute_pass, first_slot, storage_textures, num_bindings); }

//! @copydoc SDL_BindGPUComputeStorageBuffers()
inline void BindGPUComputeStorageBuffers(SDL_GPUComputePass* compute_pass, Uint32 first_slot, SDL_GPUBuffer** storage_buffers, Uint32 num_bindings) {  SDL_BindGPUComputeStorageBuffers(compute_pass, first_slot, storage_buffers, num_bindings); }

//! @copydoc SDL_DispatchGPUCompute()
inline void DispatchGPUCompute(SDL_GPUComputePass* compute_pass, Uint32 groupcount_x, Uint32 groupcount_y, Uint32 groupcount_z) {  SDL_DispatchGPUCompute(compute_pass, groupcount_x, groupcount_y, groupcount_z); }

//! @copydoc SDL_DispatchGPUComputeIndirect()
inline void DispatchGPUComputeIndirect(SDL_GPUComputePass* compute_pass, SDL_GPUBuffer* buffer, Uint32 offset) {  SDL_DispatchGPUComputeIndirect(compute_pass, buffer, offset); }

//! @copydoc SDL_EndGPUComputePass()
inline void EndGPUComputePass(SDL_GPUComputePass* compute_pass) {  SDL_EndGPUComputePass(compute_pass); }

//! @copydoc SDL_MapGPUTransferBuffer()
inline void* MapGPUTransferBuffer(SDL_GPUDevice* device, SDL_GPUTransferBuffer* transfer_buffer, bool cycle) { auto _ret = SDL_MapGPUTransferBuffer(device, transfer_buffer, cycle); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UnmapGPUTransferBuffer()
inline void UnmapGPUTransferBuffer(SDL_GPUDevice* device, SDL_GPUTransferBuffer* transfer_buffer) {  SDL_UnmapGPUTransferBuffer(device, transfer_buffer); }

//! @copydoc SDL_BeginGPUCopyPass()
inline SDL_GPUCopyPass* BeginGPUCopyPass(SDL_GPUCommandBuffer* command_buffer) { return SDL_BeginGPUCopyPass(command_buffer); }

//! @copydoc SDL_UploadToGPUTexture()
inline void UploadToGPUTexture(SDL_GPUCopyPass* copy_pass, const SDL_GPUTextureTransferInfo* source, const SDL_GPUTextureRegion* destination, bool cycle) {  SDL_UploadToGPUTexture(copy_pass, source, destination, cycle); }

//! @copydoc SDL_UploadToGPUBuffer()
inline void UploadToGPUBuffer(SDL_GPUCopyPass* copy_pass, const SDL_GPUTransferBufferLocation* source, const SDL_GPUBufferRegion* destination, bool cycle) {  SDL_UploadToGPUBuffer(copy_pass, source, destination, cycle); }

//! @copydoc SDL_CopyGPUTextureToTexture()
inline void CopyGPUTextureToTexture(SDL_GPUCopyPass* copy_pass, const SDL_GPUTextureLocation* source, const SDL_GPUTextureLocation* destination, Uint32 w, Uint32 h, Uint32 d, bool cycle) {  SDL_CopyGPUTextureToTexture(copy_pass, source, destination, w, h, d, cycle); }

//! @copydoc SDL_CopyGPUBufferToBuffer()
inline void CopyGPUBufferToBuffer(SDL_GPUCopyPass* copy_pass, const SDL_GPUBufferLocation* source, const SDL_GPUBufferLocation* destination, Uint32 size, bool cycle) {  SDL_CopyGPUBufferToBuffer(copy_pass, source, destination, size, cycle); }

//! @copydoc SDL_DownloadFromGPUTexture()
inline void DownloadFromGPUTexture(SDL_GPUCopyPass* copy_pass, const SDL_GPUTextureRegion* source, const SDL_GPUTextureTransferInfo* destination) {  SDL_DownloadFromGPUTexture(copy_pass, source, destination); }

//! @copydoc SDL_DownloadFromGPUBuffer()
inline void DownloadFromGPUBuffer(SDL_GPUCopyPass* copy_pass, const SDL_GPUBufferRegion* source, const SDL_GPUTransferBufferLocation* destination) {  SDL_DownloadFromGPUBuffer(copy_pass, source, destination); }

//! @copydoc SDL_EndGPUCopyPass()
inline void EndGPUCopyPass(SDL_GPUCopyPass* copy_pass) {  SDL_EndGPUCopyPass(copy_pass); }

//! @copydoc SDL_GenerateMipmapsForGPUTexture()
inline void GenerateMipmapsForGPUTexture(SDL_GPUCommandBuffer* command_buffer, SDL_GPUTexture* texture) {  SDL_GenerateMipmapsForGPUTexture(command_buffer, texture); }

//! @copydoc SDL_BlitGPUTexture()
inline void BlitGPUTexture(SDL_GPUCommandBuffer* command_buffer, const SDL_GPUBlitInfo* info) {  SDL_BlitGPUTexture(command_buffer, info); }

//! @copydoc SDL_WindowSupportsGPUSwapchainComposition()
inline bool WindowSupportsGPUSwapchainComposition(SDL_GPUDevice* device, SDL_Window* window, SDL_GPUSwapchainComposition swapchain_composition) { return SDL_WindowSupportsGPUSwapchainComposition(device, window, swapchain_composition); }

//! @copydoc SDL_WindowSupportsGPUPresentMode()
inline bool WindowSupportsGPUPresentMode(SDL_GPUDevice* device, SDL_Window* window, SDL_GPUPresentMode present_mode) { return SDL_WindowSupportsGPUPresentMode(device, window, present_mode); }

//! @copydoc SDL_ClaimWindowForGPUDevice()
inline bool ClaimWindowForGPUDevice(SDL_GPUDevice* device, SDL_Window* window) { auto _ret = SDL_ClaimWindowForGPUDevice(device, window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReleaseWindowFromGPUDevice()
inline void ReleaseWindowFromGPUDevice(SDL_GPUDevice* device, SDL_Window* window) {  SDL_ReleaseWindowFromGPUDevice(device, window); }

//! @copydoc SDL_SetGPUSwapchainParameters()
inline bool SetGPUSwapchainParameters(SDL_GPUDevice* device, SDL_Window* window, SDL_GPUSwapchainComposition swapchain_composition, SDL_GPUPresentMode present_mode) { auto _ret = SDL_SetGPUSwapchainParameters(device, window, swapchain_composition, present_mode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetGPUAllowedFramesInFlight()
inline bool SetGPUAllowedFramesInFlight(SDL_GPUDevice* device, Uint32 allowed_frames_in_flight) { auto _ret = SDL_SetGPUAllowedFramesInFlight(device, allowed_frames_in_flight); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetGPUSwapchainTextureFormat()
inline SDL_GPUTextureFormat GetGPUSwapchainTextureFormat(SDL_GPUDevice* device, SDL_Window* window) { return SDL_GetGPUSwapchainTextureFormat(device, window); }

//! @copydoc SDL_AcquireGPUSwapchainTexture()
inline bool AcquireGPUSwapchainTexture(SDL_GPUCommandBuffer* command_buffer, SDL_Window* window, SDL_GPUTexture** swapchain_texture, Uint32* swapchain_texture_width, Uint32* swapchain_texture_height) { auto _ret = SDL_AcquireGPUSwapchainTexture(command_buffer, window, swapchain_texture, swapchain_texture_width, swapchain_texture_height); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WaitForGPUSwapchain()
inline bool WaitForGPUSwapchain(SDL_GPUDevice* device, SDL_Window* window) { auto _ret = SDL_WaitForGPUSwapchain(device, window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WaitAndAcquireGPUSwapchainTexture()
inline bool WaitAndAcquireGPUSwapchainTexture(SDL_GPUCommandBuffer* command_buffer, SDL_Window* window, SDL_GPUTexture** swapchain_texture, Uint32* swapchain_texture_width, Uint32* swapchain_texture_height) { auto _ret = SDL_WaitAndAcquireGPUSwapchainTexture(command_buffer, window, swapchain_texture, swapchain_texture_width, swapchain_texture_height); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SubmitGPUCommandBuffer()
inline bool SubmitGPUCommandBuffer(SDL_GPUCommandBuffer* command_buffer) { auto _ret = SDL_SubmitGPUCommandBuffer(command_buffer); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SubmitGPUCommandBufferAndAcquireFence()
inline SDL_GPUFence* SubmitGPUCommandBufferAndAcquireFence(SDL_GPUCommandBuffer* command_buffer) { auto _ret = SDL_SubmitGPUCommandBufferAndAcquireFence(command_buffer); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CancelGPUCommandBuffer()
inline bool CancelGPUCommandBuffer(SDL_GPUCommandBuffer* command_buffer) { auto _ret = SDL_CancelGPUCommandBuffer(command_buffer); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WaitForGPUIdle()
inline bool WaitForGPUIdle(SDL_GPUDevice* device) { auto _ret = SDL_WaitForGPUIdle(device); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WaitForGPUFences()
inline bool WaitForGPUFences(SDL_GPUDevice* device, bool wait_all, SDL_GPUFence** fences, Uint32 num_fences) { auto _ret = SDL_WaitForGPUFences(device, wait_all, fences, num_fences); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_QueryGPUFence()
inline bool QueryGPUFence(SDL_GPUDevice* device, SDL_GPUFence* fence) { return SDL_QueryGPUFence(device, fence); }

//! @copydoc SDL_ReleaseGPUFence()
inline void ReleaseGPUFence(SDL_GPUDevice* device, SDL_GPUFence* fence) {  SDL_ReleaseGPUFence(device, fence); }

//! @copydoc SDL_GPUTextureFormatTexelBlockSize()
inline Uint32 GPUTextureFormatTexelBlockSize(SDL_GPUTextureFormat format) { return SDL_GPUTextureFormatTexelBlockSize(format); }

//! @copydoc SDL_GPUTextureSupportsFormat()
inline bool GPUTextureSupportsFormat(SDL_GPUDevice* device, SDL_GPUTextureFormat format, SDL_GPUTextureType type, SDL::GPUTextureUsageFlags usage) { return SDL_GPUTextureSupportsFormat(device, format, type, usage); }

//! @copydoc SDL_GPUTextureSupportsSampleCount()
inline bool GPUTextureSupportsSampleCount(SDL_GPUDevice* device, SDL_GPUTextureFormat format, SDL_GPUSampleCount sample_count) { return SDL_GPUTextureSupportsSampleCount(device, format, sample_count); }

//! @copydoc SDL_CalculateGPUTextureFormatSize()
inline Uint32 CalculateGPUTextureFormatSize(SDL_GPUTextureFormat format, Uint32 width, Uint32 height, Uint32 depth_or_layer_count) { return SDL_CalculateGPUTextureFormatSize(format, width, height, depth_or_layer_count); }

//! @copydoc SDL_GetHaptics()
inline SDL_HapticID* GetHaptics(int* count) { auto _ret = SDL_GetHaptics(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetHapticNameForID()
inline const char* GetHapticNameForID(SDL_HapticID instance_id) { auto _ret = SDL_GetHapticNameForID(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_OpenHaptic()
inline SDL_Haptic* OpenHaptic(SDL_HapticID instance_id) { auto _ret = SDL_OpenHaptic(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetHapticFromID()
inline SDL_Haptic* GetHapticFromID(SDL_HapticID instance_id) { auto _ret = SDL_GetHapticFromID(instance_id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetHapticID()
inline SDL_HapticID GetHapticID(SDL_Haptic* haptic) { auto _ret = SDL_GetHapticID(haptic); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetHapticName()
inline const char* GetHapticName(SDL_Haptic* haptic) { auto _ret = SDL_GetHapticName(haptic); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_IsMouseHaptic()
inline bool IsMouseHaptic() { return SDL_IsMouseHaptic(); }

//! @copydoc SDL_OpenHapticFromMouse()
inline SDL_Haptic* OpenHapticFromMouse() { auto _ret = SDL_OpenHapticFromMouse(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_IsJoystickHaptic()
inline bool IsJoystickHaptic(SDL_Joystick* joystick) { return SDL_IsJoystickHaptic(joystick); }

//! @copydoc SDL_OpenHapticFromJoystick()
inline SDL_Haptic* OpenHapticFromJoystick(SDL_Joystick* joystick) { auto _ret = SDL_OpenHapticFromJoystick(joystick); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CloseHaptic()
inline void CloseHaptic(SDL_Haptic* haptic) {  SDL_CloseHaptic(haptic); }

//! @copydoc SDL_GetMaxHapticEffects()
inline int GetMaxHapticEffects(SDL_Haptic* haptic) { auto _ret = SDL_GetMaxHapticEffects(haptic); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetMaxHapticEffectsPlaying()
inline int GetMaxHapticEffectsPlaying(SDL_Haptic* haptic) { auto _ret = SDL_GetMaxHapticEffectsPlaying(haptic); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetHapticFeatures()
inline Uint32 GetHapticFeatures(SDL_Haptic* haptic) { auto _ret = SDL_GetHapticFeatures(haptic); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetNumHapticAxes()
inline int GetNumHapticAxes(SDL_Haptic* haptic) { auto _ret = SDL_GetNumHapticAxes(haptic); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_HapticEffectSupported()
inline bool HapticEffectSupported(SDL_Haptic* haptic, const SDL_HapticEffect* effect) { return SDL_HapticEffectSupported(haptic, effect); }

//! @copydoc SDL_CreateHapticEffect()
inline int CreateHapticEffect(SDL_Haptic* haptic, const SDL_HapticEffect* effect) { auto _ret = SDL_CreateHapticEffect(haptic, effect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UpdateHapticEffect()
inline bool UpdateHapticEffect(SDL_Haptic* haptic, int effect, const SDL_HapticEffect* data) { auto _ret = SDL_UpdateHapticEffect(haptic, effect, data); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RunHapticEffect()
inline bool RunHapticEffect(SDL_Haptic* haptic, int effect, Uint32 iterations) { auto _ret = SDL_RunHapticEffect(haptic, effect, iterations); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_StopHapticEffect()
inline bool StopHapticEffect(SDL_Haptic* haptic, int effect) { auto _ret = SDL_StopHapticEffect(haptic, effect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroyHapticEffect()
inline void DestroyHapticEffect(SDL_Haptic* haptic, int effect) {  SDL_DestroyHapticEffect(haptic, effect); }

//! @copydoc SDL_GetHapticEffectStatus()
inline bool GetHapticEffectStatus(SDL_Haptic* haptic, int effect) { return SDL_GetHapticEffectStatus(haptic, effect); }

//! @copydoc SDL_SetHapticGain()
inline bool SetHapticGain(SDL_Haptic* haptic, int gain) { auto _ret = SDL_SetHapticGain(haptic, gain); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetHapticAutocenter()
inline bool SetHapticAutocenter(SDL_Haptic* haptic, int autocenter) { auto _ret = SDL_SetHapticAutocenter(haptic, autocenter); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_PauseHaptic()
inline bool PauseHaptic(SDL_Haptic* haptic) { auto _ret = SDL_PauseHaptic(haptic); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ResumeHaptic()
inline bool ResumeHaptic(SDL_Haptic* haptic) { auto _ret = SDL_ResumeHaptic(haptic); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_StopHapticEffects()
inline bool StopHapticEffects(SDL_Haptic* haptic) { auto _ret = SDL_StopHapticEffects(haptic); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_HapticRumbleSupported()
inline bool HapticRumbleSupported(SDL_Haptic* haptic) { return SDL_HapticRumbleSupported(haptic); }

//! @copydoc SDL_InitHapticRumble()
inline bool InitHapticRumble(SDL_Haptic* haptic) { auto _ret = SDL_InitHapticRumble(haptic); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_PlayHapticRumble()
inline bool PlayHapticRumble(SDL_Haptic* haptic, float strength, Uint32 length) { auto _ret = SDL_PlayHapticRumble(haptic, strength, length); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_StopHapticRumble()
inline bool StopHapticRumble(SDL_Haptic* haptic) { auto _ret = SDL_StopHapticRumble(haptic); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_init()
inline int hid_init() { auto _ret = SDL_hid_init(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_exit()
inline int hid_exit() { auto _ret = SDL_hid_exit(); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_device_change_count()
inline Uint32 hid_device_change_count() { return SDL_hid_device_change_count(); }

//! @copydoc SDL_hid_enumerate()
inline SDL_hid_device_info* hid_enumerate(unsigned short vendor_id, unsigned short product_id) { return SDL_hid_enumerate(vendor_id, product_id); }

//! @copydoc SDL_hid_free_enumeration()
inline void hid_free_enumeration(SDL_hid_device_info* devs) {  SDL_hid_free_enumeration(devs); }

//! @copydoc SDL_hid_open()
inline SDL_hid_device* hid_open(unsigned short vendor_id, unsigned short product_id, const wchar_t* serial_number) { auto _ret = SDL_hid_open(vendor_id, product_id, serial_number); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_open_path()
inline SDL_hid_device* hid_open_path(const char* path) { auto _ret = SDL_hid_open_path(path); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_write()
inline int hid_write(SDL_hid_device* dev, const unsigned char* data, size_t length) { auto _ret = SDL_hid_write(dev, data, length); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_read_timeout()
inline int hid_read_timeout(SDL_hid_device* dev, unsigned char* data, size_t length, int milliseconds) { auto _ret = SDL_hid_read_timeout(dev, data, length, milliseconds); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_read()
inline int hid_read(SDL_hid_device* dev, unsigned char* data, size_t length) { auto _ret = SDL_hid_read(dev, data, length); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_set_nonblocking()
inline int hid_set_nonblocking(SDL_hid_device* dev, int nonblock) { auto _ret = SDL_hid_set_nonblocking(dev, nonblock); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_send_feature_report()
inline int hid_send_feature_report(SDL_hid_device* dev, const unsigned char* data, size_t length) { auto _ret = SDL_hid_send_feature_report(dev, data, length); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_get_feature_report()
inline int hid_get_feature_report(SDL_hid_device* dev, unsigned char* data, size_t length) { auto _ret = SDL_hid_get_feature_report(dev, data, length); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_get_input_report()
inline int hid_get_input_report(SDL_hid_device* dev, unsigned char* data, size_t length) { auto _ret = SDL_hid_get_input_report(dev, data, length); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_close()
inline int hid_close(SDL_hid_device* dev) { auto _ret = SDL_hid_close(dev); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_get_manufacturer_string()
inline int hid_get_manufacturer_string(SDL_hid_device* dev, wchar_t* string, size_t maxlen) { auto _ret = SDL_hid_get_manufacturer_string(dev, string, maxlen); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_get_product_string()
inline int hid_get_product_string(SDL_hid_device* dev, wchar_t* string, size_t maxlen) { auto _ret = SDL_hid_get_product_string(dev, string, maxlen); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_get_serial_number_string()
inline int hid_get_serial_number_string(SDL_hid_device* dev, wchar_t* string, size_t maxlen) { auto _ret = SDL_hid_get_serial_number_string(dev, string, maxlen); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_get_indexed_string()
inline int hid_get_indexed_string(SDL_hid_device* dev, int string_index, wchar_t* string, size_t maxlen) { auto _ret = SDL_hid_get_indexed_string(dev, string_index, string, maxlen); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_get_device_info()
inline SDL_hid_device_info* hid_get_device_info(SDL_hid_device* dev) { auto _ret = SDL_hid_get_device_info(dev); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_get_report_descriptor()
inline int hid_get_report_descriptor(SDL_hid_device* dev, unsigned char* buf, size_t buf_size) { auto _ret = SDL_hid_get_report_descriptor(dev, buf, buf_size); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_hid_ble_scan()
inline void hid_ble_scan(bool active) {  SDL_hid_ble_scan(active); }

//! @copydoc SDL_SetHintWithPriority()
inline bool SetHintWithPriority(const char* name, const char* value, SDL_HintPriority priority) { auto _ret = SDL_SetHintWithPriority(name, value, priority); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetHint()
inline bool SetHint(const char* name, const char* value) { auto _ret = SDL_SetHint(name, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ResetHint()
inline bool ResetHint(const char* name) { auto _ret = SDL_ResetHint(name); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ResetHints()
inline void ResetHints() {  SDL_ResetHints(); }

//! @copydoc SDL_GetHint()
inline const char* GetHint(const char* name) { return SDL_GetHint(name); }

//! @copydoc SDL_GetHintBoolean()
inline bool GetHintBoolean(const char* name, bool default_value) { return SDL_GetHintBoolean(name, default_value); }

//! @copydoc SDL_AddHintCallback()
inline bool AddHintCallback(const char* name, SDL_HintCallback callback, void* userdata) { auto _ret = SDL_AddHintCallback(name, callback, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RemoveHintCallback()
inline void RemoveHintCallback(const char* name, SDL_HintCallback callback, void* userdata) {  SDL_RemoveHintCallback(name, callback, userdata); }

//! @copydoc SDL_Init()
inline bool Init(SDL::InitFlags flags) { auto _ret = SDL_Init(flags); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_InitSubSystem()
inline bool InitSubSystem(SDL::InitFlags flags) { auto _ret = SDL_InitSubSystem(flags); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_QuitSubSystem()
inline void QuitSubSystem(SDL::InitFlags flags) {  SDL_QuitSubSystem(flags); }

//! @copydoc SDL_WasInit()
inline SDL::InitFlags WasInit(SDL::InitFlags flags) { return (SDL::InitFlags) SDL_WasInit(flags); }

//! @copydoc SDL_Quit()
inline void Quit() {  SDL_Quit(); }

//! @copydoc SDL_IsMainThread()
inline bool IsMainThread() { return SDL_IsMainThread(); }

//! @copydoc SDL_RunOnMainThread()
inline bool RunOnMainThread(SDL_MainThreadCallback callback, void* userdata, bool wait_complete) { auto _ret = SDL_RunOnMainThread(callback, userdata, wait_complete); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetAppMetadata()
inline bool SetAppMetadata(const char* appname, const char* appversion, const char* appidentifier) { auto _ret = SDL_SetAppMetadata(appname, appversion, appidentifier); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetAppMetadataProperty()
inline bool SetAppMetadataProperty(const char* name, const char* value) { auto _ret = SDL_SetAppMetadataProperty(name, value); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetAppMetadataProperty()
inline const char* GetAppMetadataProperty(const char* name) { return SDL_GetAppMetadataProperty(name); }

//! @copydoc SDL_LoadObject()
inline SDL_SharedObject* LoadObject(const char* sofile) { auto _ret = SDL_LoadObject(sofile); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_LoadFunction()
inline SDL_FunctionPointer LoadFunction(SDL_SharedObject* handle, const char* name) { auto _ret = SDL_LoadFunction(handle, name); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UnloadObject()
inline void UnloadObject(SDL_SharedObject* handle) {  SDL_UnloadObject(handle); }

//! @copydoc SDL_GetPreferredLocales()
inline SDL_Locale** GetPreferredLocales(int* count) { auto _ret = SDL_GetPreferredLocales(count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetLogPriorities()
inline void SetLogPriorities(SDL_LogPriority priority) {  SDL_SetLogPriorities(priority); }

//! @copydoc SDL_SetLogPriority()
inline void SetLogPriority(int category, SDL_LogPriority priority) {  SDL_SetLogPriority(category, priority); }

//! @copydoc SDL_GetLogPriority()
inline SDL_LogPriority GetLogPriority(int category) { return SDL_GetLogPriority(category); }

//! @copydoc SDL_ResetLogPriorities()
inline void ResetLogPriorities() {  SDL_ResetLogPriorities(); }

//! @copydoc SDL_SetLogPriorityPrefix()
inline bool SetLogPriorityPrefix(SDL_LogPriority priority, const char* prefix) { auto _ret = SDL_SetLogPriorityPrefix(priority, prefix); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_LogMessageV()
inline void LogMessageV(int category, SDL_LogPriority priority, const char* fmt, va_list ap) {  SDL_LogMessageV(category, priority, fmt, ap); }

//! @copydoc SDL_GetDefaultLogOutputFunction()
inline SDL_LogOutputFunction GetDefaultLogOutputFunction() { return SDL_GetDefaultLogOutputFunction(); }

//! @copydoc SDL_GetLogOutputFunction()
inline void GetLogOutputFunction(SDL_LogOutputFunction* callback, void** userdata) {  SDL_GetLogOutputFunction(callback, userdata); }

//! @copydoc SDL_SetLogOutputFunction()
inline void SetLogOutputFunction(SDL_LogOutputFunction callback, void* userdata) {  SDL_SetLogOutputFunction(callback, userdata); }

//! @copydoc SDL_ShowMessageBox()
inline bool ShowMessageBox(const SDL_MessageBoxData* messageboxdata, int* buttonid) { auto _ret = SDL_ShowMessageBox(messageboxdata, buttonid); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ShowSimpleMessageBox()
inline bool ShowSimpleMessageBox(SDL::MessageBoxFlags flags, const char* title, const char* message, SDL_Window* window) { auto _ret = SDL_ShowSimpleMessageBox(flags, title, message, window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_Metal_CreateView()
inline SDL_MetalView Metal_CreateView(SDL_Window* window) { return SDL_Metal_CreateView(window); }

//! @copydoc SDL_Metal_DestroyView()
inline void Metal_DestroyView(SDL_MetalView view) {  SDL_Metal_DestroyView(view); }

//! @copydoc SDL_Metal_GetLayer()
inline void* Metal_GetLayer(SDL_MetalView view) { return SDL_Metal_GetLayer(view); }

//! @copydoc SDL_OpenURL()
inline bool OpenURL(const char* url) { auto _ret = SDL_OpenURL(url); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetPlatform()
inline const char* GetPlatform() { return SDL_GetPlatform(); }

//! @copydoc SDL_CreateProcess()
inline SDL_Process* CreateProcess(const char** args, bool pipe_stdio) { return SDL_CreateProcess(args, pipe_stdio); }

//! @copydoc SDL_CreateProcessWithProperties()
inline SDL_Process* CreateProcessWithProperties(SDL_PropertiesID props) { return SDL_CreateProcessWithProperties(props); }

//! @copydoc SDL_GetProcessProperties()
inline SDL_PropertiesID GetProcessProperties(SDL_Process* process) { auto _ret = SDL_GetProcessProperties(process); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadProcess()
inline void* ReadProcess(SDL_Process* process, size_t* datasize, int* exitcode) { auto _ret = SDL_ReadProcess(process, datasize, exitcode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetProcessInput()
inline SDL_IOStream* GetProcessInput(SDL_Process* process) { auto _ret = SDL_GetProcessInput(process); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetProcessOutput()
inline SDL_IOStream* GetProcessOutput(SDL_Process* process) { auto _ret = SDL_GetProcessOutput(process); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_KillProcess()
inline bool KillProcess(SDL_Process* process, bool force) { auto _ret = SDL_KillProcess(process, force); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WaitProcess()
inline bool WaitProcess(SDL_Process* process, bool block, int* exitcode) { return SDL_WaitProcess(process, block, exitcode); }

//! @copydoc SDL_DestroyProcess()
inline void DestroyProcess(SDL_Process* process) {  SDL_DestroyProcess(process); }

//! @copydoc SDL_GetNumRenderDrivers()
inline int GetNumRenderDrivers() { return SDL_GetNumRenderDrivers(); }

//! @copydoc SDL_GetRenderDriver()
inline const char* GetRenderDriver(int index) { return SDL_GetRenderDriver(index); }

//! @copydoc SDL_CreateWindowAndRenderer()
inline bool CreateWindowAndRenderer(const char* title, int width, int height, SDL::WindowFlags window_flags, SDL_Window** window, SDL_Renderer** renderer) { auto _ret = SDL_CreateWindowAndRenderer(title, width, height, window_flags, window, renderer); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateRenderer()
inline SDL_Renderer* CreateRenderer(SDL_Window* window, const char* name) { auto _ret = SDL_CreateRenderer(window, name); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateRendererWithProperties()
inline SDL_Renderer* CreateRendererWithProperties(SDL_PropertiesID props) { auto _ret = SDL_CreateRendererWithProperties(props); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateSoftwareRenderer()
inline SDL_Renderer* CreateSoftwareRenderer(SDL_Surface* surface) { auto _ret = SDL_CreateSoftwareRenderer(surface); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderer()
inline SDL_Renderer* GetRenderer(SDL_Window* window) { auto _ret = SDL_GetRenderer(window); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderWindow()
inline SDL_Window* GetRenderWindow(SDL_Renderer* renderer) { auto _ret = SDL_GetRenderWindow(renderer); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRendererName()
inline const char* GetRendererName(SDL_Renderer* renderer) { auto _ret = SDL_GetRendererName(renderer); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRendererProperties()
inline SDL_PropertiesID GetRendererProperties(SDL_Renderer* renderer) { auto _ret = SDL_GetRendererProperties(renderer); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderOutputSize()
inline bool GetRenderOutputSize(SDL_Renderer* renderer, int* w, int* h) { auto _ret = SDL_GetRenderOutputSize(renderer, w, h); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetCurrentRenderOutputSize()
inline bool GetCurrentRenderOutputSize(SDL_Renderer* renderer, int* w, int* h) { auto _ret = SDL_GetCurrentRenderOutputSize(renderer, w, h); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateTexture()
inline SDL_Texture* CreateTexture(SDL_Renderer* renderer, SDL_PixelFormat format, SDL_TextureAccess access, int w, int h) { auto _ret = SDL_CreateTexture(renderer, format, access, w, h); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateTextureFromSurface()
inline SDL_Texture* CreateTextureFromSurface(SDL_Renderer* renderer, SDL_Surface* surface) { auto _ret = SDL_CreateTextureFromSurface(renderer, surface); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateTextureWithProperties()
inline SDL_Texture* CreateTextureWithProperties(SDL_Renderer* renderer, SDL_PropertiesID props) { auto _ret = SDL_CreateTextureWithProperties(renderer, props); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetTextureProperties()
inline SDL_PropertiesID GetTextureProperties(SDL_Texture* texture) { auto _ret = SDL_GetTextureProperties(texture); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRendererFromTexture()
inline SDL_Renderer* GetRendererFromTexture(SDL_Texture* texture) { auto _ret = SDL_GetRendererFromTexture(texture); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetTextureSize()
inline bool GetTextureSize(SDL_Texture* texture, float* w, float* h) { auto _ret = SDL_GetTextureSize(texture, w, h); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetTextureColorMod()
inline bool SetTextureColorMod(SDL_Texture* texture, Uint8 r, Uint8 g, Uint8 b) { auto _ret = SDL_SetTextureColorMod(texture, r, g, b); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetTextureColorModFloat()
inline bool SetTextureColorModFloat(SDL_Texture* texture, float r, float g, float b) { auto _ret = SDL_SetTextureColorModFloat(texture, r, g, b); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetTextureColorMod()
inline bool GetTextureColorMod(SDL_Texture* texture, Uint8* r, Uint8* g, Uint8* b) { auto _ret = SDL_GetTextureColorMod(texture, r, g, b); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetTextureColorModFloat()
inline bool GetTextureColorModFloat(SDL_Texture* texture, float* r, float* g, float* b) { auto _ret = SDL_GetTextureColorModFloat(texture, r, g, b); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetTextureAlphaMod()
inline bool SetTextureAlphaMod(SDL_Texture* texture, Uint8 alpha) { auto _ret = SDL_SetTextureAlphaMod(texture, alpha); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetTextureAlphaModFloat()
inline bool SetTextureAlphaModFloat(SDL_Texture* texture, float alpha) { auto _ret = SDL_SetTextureAlphaModFloat(texture, alpha); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetTextureAlphaMod()
inline bool GetTextureAlphaMod(SDL_Texture* texture, Uint8* alpha) { auto _ret = SDL_GetTextureAlphaMod(texture, alpha); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetTextureAlphaModFloat()
inline bool GetTextureAlphaModFloat(SDL_Texture* texture, float* alpha) { auto _ret = SDL_GetTextureAlphaModFloat(texture, alpha); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetTextureBlendMode()
inline bool SetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode blendMode) { auto _ret = SDL_SetTextureBlendMode(texture, blendMode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetTextureBlendMode()
inline bool GetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode* blendMode) { auto _ret = SDL_GetTextureBlendMode(texture, blendMode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetTextureScaleMode()
inline bool SetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode scaleMode) { auto _ret = SDL_SetTextureScaleMode(texture, scaleMode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetTextureScaleMode()
inline bool GetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode* scaleMode) { auto _ret = SDL_GetTextureScaleMode(texture, scaleMode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UpdateTexture()
inline bool UpdateTexture(SDL_Texture* texture, const SDL_Rect* rect, const void* pixels, int pitch) { auto _ret = SDL_UpdateTexture(texture, rect, pixels, pitch); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UpdateYUVTexture()
inline bool UpdateYUVTexture(SDL_Texture* texture, const SDL_Rect* rect, const Uint8* Yplane, int Ypitch, const Uint8* Uplane, int Upitch, const Uint8* Vplane, int Vpitch) { auto _ret = SDL_UpdateYUVTexture(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UpdateNVTexture()
inline bool UpdateNVTexture(SDL_Texture* texture, const SDL_Rect* rect, const Uint8* Yplane, int Ypitch, const Uint8* UVplane, int UVpitch) { auto _ret = SDL_UpdateNVTexture(texture, rect, Yplane, Ypitch, UVplane, UVpitch); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_LockTexture()
inline bool LockTexture(SDL_Texture* texture, const SDL_Rect* rect, void** pixels, int* pitch) { auto _ret = SDL_LockTexture(texture, rect, pixels, pitch); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_LockTextureToSurface()
inline bool LockTextureToSurface(SDL_Texture* texture, const SDL_Rect* rect, SDL_Surface** surface) { auto _ret = SDL_LockTextureToSurface(texture, rect, surface); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_UnlockTexture()
inline void UnlockTexture(SDL_Texture* texture) {  SDL_UnlockTexture(texture); }

//! @copydoc SDL_SetRenderTarget()
inline bool SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture) { auto _ret = SDL_SetRenderTarget(renderer, texture); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderTarget()
inline SDL_Texture* GetRenderTarget(SDL_Renderer* renderer) { return SDL_GetRenderTarget(renderer); }

//! @copydoc SDL_SetRenderLogicalPresentation()
inline bool SetRenderLogicalPresentation(SDL_Renderer* renderer, int w, int h, SDL_RendererLogicalPresentation mode) { auto _ret = SDL_SetRenderLogicalPresentation(renderer, w, h, mode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderLogicalPresentation()
inline bool GetRenderLogicalPresentation(SDL_Renderer* renderer, int* w, int* h, SDL_RendererLogicalPresentation* mode) { auto _ret = SDL_GetRenderLogicalPresentation(renderer, w, h, mode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderLogicalPresentationRect()
inline bool GetRenderLogicalPresentationRect(SDL_Renderer* renderer, SDL_FRect* rect) { auto _ret = SDL_GetRenderLogicalPresentationRect(renderer, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderCoordinatesFromWindow()
inline bool RenderCoordinatesFromWindow(SDL_Renderer* renderer, float window_x, float window_y, float* x, float* y) { auto _ret = SDL_RenderCoordinatesFromWindow(renderer, window_x, window_y, x, y); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderCoordinatesToWindow()
inline bool RenderCoordinatesToWindow(SDL_Renderer* renderer, float x, float y, float* window_x, float* window_y) { auto _ret = SDL_RenderCoordinatesToWindow(renderer, x, y, window_x, window_y); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ConvertEventToRenderCoordinates()
inline bool ConvertEventToRenderCoordinates(SDL_Renderer* renderer, SDL_Event* event) { auto _ret = SDL_ConvertEventToRenderCoordinates(renderer, event); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetRenderViewport()
inline bool SetRenderViewport(SDL_Renderer* renderer, const SDL_Rect* rect) { auto _ret = SDL_SetRenderViewport(renderer, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderViewport()
inline bool GetRenderViewport(SDL_Renderer* renderer, SDL_Rect* rect) { auto _ret = SDL_GetRenderViewport(renderer, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderViewportSet()
inline bool RenderViewportSet(SDL_Renderer* renderer) { return SDL_RenderViewportSet(renderer); }

//! @copydoc SDL_GetRenderSafeArea()
inline bool GetRenderSafeArea(SDL_Renderer* renderer, SDL_Rect* rect) { auto _ret = SDL_GetRenderSafeArea(renderer, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetRenderClipRect()
inline bool SetRenderClipRect(SDL_Renderer* renderer, const SDL_Rect* rect) { auto _ret = SDL_SetRenderClipRect(renderer, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderClipRect()
inline bool GetRenderClipRect(SDL_Renderer* renderer, SDL_Rect* rect) { auto _ret = SDL_GetRenderClipRect(renderer, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderClipEnabled()
inline bool RenderClipEnabled(SDL_Renderer* renderer) { auto _ret = SDL_RenderClipEnabled(renderer); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetRenderScale()
inline bool SetRenderScale(SDL_Renderer* renderer, float scaleX, float scaleY) { auto _ret = SDL_SetRenderScale(renderer, scaleX, scaleY); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderScale()
inline bool GetRenderScale(SDL_Renderer* renderer, float* scaleX, float* scaleY) { auto _ret = SDL_GetRenderScale(renderer, scaleX, scaleY); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetRenderDrawColor()
inline bool SetRenderDrawColor(SDL_Renderer* renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a) { auto _ret = SDL_SetRenderDrawColor(renderer, r, g, b, a); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetRenderDrawColorFloat()
inline bool SetRenderDrawColorFloat(SDL_Renderer* renderer, float r, float g, float b, float a) { auto _ret = SDL_SetRenderDrawColorFloat(renderer, r, g, b, a); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderDrawColor()
inline bool GetRenderDrawColor(SDL_Renderer* renderer, Uint8* r, Uint8* g, Uint8* b, Uint8* a) { auto _ret = SDL_GetRenderDrawColor(renderer, r, g, b, a); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderDrawColorFloat()
inline bool GetRenderDrawColorFloat(SDL_Renderer* renderer, float* r, float* g, float* b, float* a) { auto _ret = SDL_GetRenderDrawColorFloat(renderer, r, g, b, a); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetRenderColorScale()
inline bool SetRenderColorScale(SDL_Renderer* renderer, float scale) { auto _ret = SDL_SetRenderColorScale(renderer, scale); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderColorScale()
inline bool GetRenderColorScale(SDL_Renderer* renderer, float* scale) { auto _ret = SDL_GetRenderColorScale(renderer, scale); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetRenderDrawBlendMode()
inline bool SetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode blendMode) { auto _ret = SDL_SetRenderDrawBlendMode(renderer, blendMode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderDrawBlendMode()
inline bool GetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode* blendMode) { auto _ret = SDL_GetRenderDrawBlendMode(renderer, blendMode); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderClear()
inline bool RenderClear(SDL_Renderer* renderer) { auto _ret = SDL_RenderClear(renderer); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderPoint()
inline bool RenderPoint(SDL_Renderer* renderer, float x, float y) { auto _ret = SDL_RenderPoint(renderer, x, y); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderPoints()
inline bool RenderPoints(SDL_Renderer* renderer, const SDL_FPoint* points, int count) { auto _ret = SDL_RenderPoints(renderer, points, count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderLine()
inline bool RenderLine(SDL_Renderer* renderer, float x1, float y1, float x2, float y2) { auto _ret = SDL_RenderLine(renderer, x1, y1, x2, y2); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderLines()
inline bool RenderLines(SDL_Renderer* renderer, const SDL_FPoint* points, int count) { auto _ret = SDL_RenderLines(renderer, points, count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderRect()
inline bool RenderRect(SDL_Renderer* renderer, const SDL_FRect* rect) { auto _ret = SDL_RenderRect(renderer, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderRects()
inline bool RenderRects(SDL_Renderer* renderer, const SDL_FRect* rects, int count) { auto _ret = SDL_RenderRects(renderer, rects, count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderFillRect()
inline bool RenderFillRect(SDL_Renderer* renderer, const SDL_FRect* rect) { auto _ret = SDL_RenderFillRect(renderer, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderFillRects()
inline bool RenderFillRects(SDL_Renderer* renderer, const SDL_FRect* rects, int count) { auto _ret = SDL_RenderFillRects(renderer, rects, count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderTexture()
inline bool RenderTexture(SDL_Renderer* renderer, SDL_Texture* texture, const SDL_FRect* srcrect, const SDL_FRect* dstrect) { auto _ret = SDL_RenderTexture(renderer, texture, srcrect, dstrect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderTextureRotated()
inline bool RenderTextureRotated(SDL_Renderer* renderer, SDL_Texture* texture, const SDL_FRect* srcrect, const SDL_FRect* dstrect, double angle, const SDL_FPoint* center, SDL_FlipMode flip) { auto _ret = SDL_RenderTextureRotated(renderer, texture, srcrect, dstrect, angle, center, flip); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderTextureAffine()
inline bool RenderTextureAffine(SDL_Renderer* renderer, SDL_Texture* texture, const SDL_FRect* srcrect, const SDL_FPoint* origin, const SDL_FPoint* right, const SDL_FPoint* down) { auto _ret = SDL_RenderTextureAffine(renderer, texture, srcrect, origin, right, down); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderTextureTiled()
inline bool RenderTextureTiled(SDL_Renderer* renderer, SDL_Texture* texture, const SDL_FRect* srcrect, float scale, const SDL_FRect* dstrect) { auto _ret = SDL_RenderTextureTiled(renderer, texture, srcrect, scale, dstrect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderTexture9Grid()
inline bool RenderTexture9Grid(SDL_Renderer* renderer, SDL_Texture* texture, const SDL_FRect* srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, const SDL_FRect* dstrect) { auto _ret = SDL_RenderTexture9Grid(renderer, texture, srcrect, left_width, right_width, top_height, bottom_height, scale, dstrect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderGeometry()
inline bool RenderGeometry(SDL_Renderer* renderer, SDL_Texture* texture, const SDL_Vertex* vertices, int num_vertices, const int* indices, int num_indices) { auto _ret = SDL_RenderGeometry(renderer, texture, vertices, num_vertices, indices, num_indices); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderGeometryRaw()
inline bool RenderGeometryRaw(SDL_Renderer* renderer, SDL_Texture* texture, const float* xy, int xy_stride, const SDL_FColor* color, int color_stride, const float* uv, int uv_stride, int num_vertices, const void* indices, int num_indices, int size_indices) { auto _ret = SDL_RenderGeometryRaw(renderer, texture, xy, xy_stride, color, color_stride, uv, uv_stride, num_vertices, indices, num_indices, size_indices); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderReadPixels()
inline SDL_Surface* RenderReadPixels(SDL_Renderer* renderer, const SDL_Rect* rect) { auto _ret = SDL_RenderReadPixels(renderer, rect); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderPresent()
inline bool RenderPresent(SDL_Renderer* renderer) { auto _ret = SDL_RenderPresent(renderer); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DestroyTexture()
inline void DestroyTexture(SDL_Texture* texture) {  SDL_DestroyTexture(texture); }

//! @copydoc SDL_DestroyRenderer()
inline void DestroyRenderer(SDL_Renderer* renderer) {  SDL_DestroyRenderer(renderer); }

//! @copydoc SDL_FlushRenderer()
inline bool FlushRenderer(SDL_Renderer* renderer) { auto _ret = SDL_FlushRenderer(renderer); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderMetalLayer()
inline void* GetRenderMetalLayer(SDL_Renderer* renderer) { return SDL_GetRenderMetalLayer(renderer); }

//! @copydoc SDL_GetRenderMetalCommandEncoder()
inline void* GetRenderMetalCommandEncoder(SDL_Renderer* renderer) { return SDL_GetRenderMetalCommandEncoder(renderer); }

//! @copydoc SDL_AddVulkanRenderSemaphores()
inline bool AddVulkanRenderSemaphores(SDL_Renderer* renderer, Uint32 wait_stage_mask, Sint64 wait_semaphore, Sint64 signal_semaphore) { auto _ret = SDL_AddVulkanRenderSemaphores(renderer, wait_stage_mask, wait_semaphore, signal_semaphore); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetRenderVSync()
inline bool SetRenderVSync(SDL_Renderer* renderer, int vsync) { auto _ret = SDL_SetRenderVSync(renderer, vsync); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetRenderVSync()
inline bool GetRenderVSync(SDL_Renderer* renderer, int* vsync) { auto _ret = SDL_GetRenderVSync(renderer, vsync); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenderDebugText()
inline bool RenderDebugText(SDL_Renderer* renderer, float x, float y, const char* str) { auto _ret = SDL_RenderDebugText(renderer, x, y, str); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_OpenTitleStorage()
inline SDL_Storage* OpenTitleStorage(const char* override, SDL_PropertiesID props) { auto _ret = SDL_OpenTitleStorage(override, props); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_OpenUserStorage()
inline SDL_Storage* OpenUserStorage(const char* org, const char* app, SDL_PropertiesID props) { auto _ret = SDL_OpenUserStorage(org, app, props); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_OpenFileStorage()
inline SDL_Storage* OpenFileStorage(const char* path) { auto _ret = SDL_OpenFileStorage(path); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_OpenStorage()
inline SDL_Storage* OpenStorage(const SDL_StorageInterface* iface, void* userdata) { auto _ret = SDL_OpenStorage(iface, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CloseStorage()
inline bool CloseStorage(SDL_Storage* storage) { auto _ret = SDL_CloseStorage(storage); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_StorageReady()
inline bool StorageReady(SDL_Storage* storage) { return SDL_StorageReady(storage); }

//! @copydoc SDL_GetStorageFileSize()
inline bool GetStorageFileSize(SDL_Storage* storage, const char* path, Uint64* length) { auto _ret = SDL_GetStorageFileSize(storage, path, length); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_ReadStorageFile()
inline bool ReadStorageFile(SDL_Storage* storage, const char* path, void* destination, Uint64 length) { auto _ret = SDL_ReadStorageFile(storage, path, destination, length); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_WriteStorageFile()
inline bool WriteStorageFile(SDL_Storage* storage, const char* path, const void* source, Uint64 length) { auto _ret = SDL_WriteStorageFile(storage, path, source, length); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateStorageDirectory()
inline bool CreateStorageDirectory(SDL_Storage* storage, const char* path) { auto _ret = SDL_CreateStorageDirectory(storage, path); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_EnumerateStorageDirectory()
inline bool EnumerateStorageDirectory(SDL_Storage* storage, const char* path, SDL_EnumerateDirectoryCallback callback, void* userdata) { auto _ret = SDL_EnumerateStorageDirectory(storage, path, callback, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RemoveStoragePath()
inline bool RemoveStoragePath(SDL_Storage* storage, const char* path) { auto _ret = SDL_RemoveStoragePath(storage, path); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RenameStoragePath()
inline bool RenameStoragePath(SDL_Storage* storage, const char* oldpath, const char* newpath) { auto _ret = SDL_RenameStoragePath(storage, oldpath, newpath); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CopyStorageFile()
inline bool CopyStorageFile(SDL_Storage* storage, const char* oldpath, const char* newpath) { auto _ret = SDL_CopyStorageFile(storage, oldpath, newpath); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetStoragePathInfo()
inline bool GetStoragePathInfo(SDL_Storage* storage, const char* path, SDL_PathInfo* info) { auto _ret = SDL_GetStoragePathInfo(storage, path, info); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetStorageSpaceRemaining()
inline Uint64 GetStorageSpaceRemaining(SDL_Storage* storage) { return SDL_GetStorageSpaceRemaining(storage); }

//! @copydoc SDL_GlobStorageDirectory()
inline char** GlobStorageDirectory(SDL_Storage* storage, const char* path, const char* pattern, SDL::GlobFlags flags, int* count) { auto _ret = SDL_GlobStorageDirectory(storage, path, pattern, flags, count); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetX11EventHook()
inline void SetX11EventHook(SDL_X11EventHook callback, void* userdata) {  SDL_SetX11EventHook(callback, userdata); }

//! @copydoc SDL_SetLinuxThreadPriority()
inline bool SetLinuxThreadPriority(Sint64 threadID, int priority) { auto _ret = SDL_SetLinuxThreadPriority(threadID, priority); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_SetLinuxThreadPriorityAndPolicy()
inline bool SetLinuxThreadPriorityAndPolicy(Sint64 threadID, int sdlPriority, int schedPolicy) { auto _ret = SDL_SetLinuxThreadPriorityAndPolicy(threadID, sdlPriority, schedPolicy); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_IsTablet()
inline bool IsTablet() { return SDL_IsTablet(); }

//! @copydoc SDL_IsTV()
inline bool IsTV() { return SDL_IsTV(); }

//! @copydoc SDL_GetSandbox()
inline SDL_Sandbox GetSandbox() { return SDL_GetSandbox(); }

//! @copydoc SDL_OnApplicationWillTerminate()
inline void OnApplicationWillTerminate() {  SDL_OnApplicationWillTerminate(); }

//! @copydoc SDL_OnApplicationDidReceiveMemoryWarning()
inline void OnApplicationDidReceiveMemoryWarning() {  SDL_OnApplicationDidReceiveMemoryWarning(); }

//! @copydoc SDL_OnApplicationWillEnterBackground()
inline void OnApplicationWillEnterBackground() {  SDL_OnApplicationWillEnterBackground(); }

//! @copydoc SDL_OnApplicationDidEnterBackground()
inline void OnApplicationDidEnterBackground() {  SDL_OnApplicationDidEnterBackground(); }

//! @copydoc SDL_OnApplicationWillEnterForeground()
inline void OnApplicationWillEnterForeground() {  SDL_OnApplicationWillEnterForeground(); }

//! @copydoc SDL_OnApplicationDidEnterForeground()
inline void OnApplicationDidEnterForeground() {  SDL_OnApplicationDidEnterForeground(); }

//! @copydoc SDL_GetDateTimeLocalePreferences()
inline bool GetDateTimeLocalePreferences(SDL_DateFormat* dateFormat, SDL_TimeFormat* timeFormat) { auto _ret = SDL_GetDateTimeLocalePreferences(dateFormat, timeFormat); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetCurrentTime()
inline bool GetCurrentTime(SDL_Time* ticks) { auto _ret = SDL_GetCurrentTime(ticks); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_TimeToDateTime()
inline bool TimeToDateTime(SDL_Time ticks, SDL_DateTime* dt, bool localTime) { auto _ret = SDL_TimeToDateTime(ticks, dt, localTime); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_DateTimeToTime()
inline bool DateTimeToTime(const SDL_DateTime* dt, SDL_Time* ticks) { auto _ret = SDL_DateTimeToTime(dt, ticks); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_TimeToWindows()
inline void TimeToWindows(SDL_Time ticks, Uint32* dwLowDateTime, Uint32* dwHighDateTime) {  SDL_TimeToWindows(ticks, dwLowDateTime, dwHighDateTime); }

//! @copydoc SDL_TimeFromWindows()
inline SDL_Time TimeFromWindows(Uint32 dwLowDateTime, Uint32 dwHighDateTime) { return SDL_TimeFromWindows(dwLowDateTime, dwHighDateTime); }

//! @copydoc SDL_GetDaysInMonth()
inline int GetDaysInMonth(int year, int month) { auto _ret = SDL_GetDaysInMonth(year, month); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetDayOfYear()
inline int GetDayOfYear(int year, int month, int day) { auto _ret = SDL_GetDayOfYear(year, month, day); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetDayOfWeek()
inline int GetDayOfWeek(int year, int month, int day) { auto _ret = SDL_GetDayOfWeek(year, month, day); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_GetTicks()
inline Uint64 GetTicks() { return SDL_GetTicks(); }

//! @copydoc SDL_GetTicksNS()
inline Uint64 GetTicksNS() { return SDL_GetTicksNS(); }

//! @copydoc SDL_GetPerformanceCounter()
inline Uint64 GetPerformanceCounter() { return SDL_GetPerformanceCounter(); }

//! @copydoc SDL_GetPerformanceFrequency()
inline Uint64 GetPerformanceFrequency() { return SDL_GetPerformanceFrequency(); }

//! @copydoc SDL_Delay()
inline void Delay(Uint32 ms) {  SDL_Delay(ms); }

//! @copydoc SDL_DelayNS()
inline void DelayNS(Uint64 ns) {  SDL_DelayNS(ns); }

//! @copydoc SDL_DelayPrecise()
inline void DelayPrecise(Uint64 ns) {  SDL_DelayPrecise(ns); }

//! @copydoc SDL_AddTimer()
inline SDL_TimerID AddTimer(Uint32 interval, SDL_TimerCallback callback, void* userdata) { auto _ret = SDL_AddTimer(interval, callback, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_AddTimerNS()
inline SDL_TimerID AddTimerNS(Uint64 interval, SDL_NSTimerCallback callback, void* userdata) { auto _ret = SDL_AddTimerNS(interval, callback, userdata); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_RemoveTimer()
inline bool RemoveTimer(SDL_TimerID id) { auto _ret = SDL_RemoveTimer(id); if (!_ret) throw SDL::Error(SDL::raw::GetError()); return _ret; }

//! @copydoc SDL_CreateTray()
inline SDL_Tray* CreateTray(SDL_Surface* icon, const char* tooltip) { return SDL_CreateTray(icon, tooltip); }

//! @copydoc SDL_SetTrayIcon()
inline void SetTrayIcon(SDL_Tray* tray, SDL_Surface* icon) {  SDL_SetTrayIcon(tray, icon); }

//! @copydoc SDL_SetTrayTooltip()
inline void SetTrayTooltip(SDL_Tray* tray, const char* tooltip) {  SDL_SetTrayTooltip(tray, tooltip); }

//! @copydoc SDL_CreateTrayMenu()
inline SDL_TrayMenu* CreateTrayMenu(SDL_Tray* tray) { return SDL_CreateTrayMenu(tray); }

//! @copydoc SDL_CreateTraySubmenu()
inline SDL_TrayMenu* CreateTraySubmenu(SDL_TrayEntry* entry) { return SDL_CreateTraySubmenu(entry); }

//! @copydoc SDL_GetTrayMenu()
inline SDL_TrayMenu* GetTrayMenu(SDL_Tray* tray) { return SDL_GetTrayMenu(tray); }

//! @copydoc SDL_GetTraySubmenu()
inline SDL_TrayMenu* GetTraySubmenu(SDL_TrayEntry* entry) { return SDL_GetTraySubmenu(entry); }

//! @copydoc SDL_GetTrayEntries()
inline const SDL_TrayEntry** GetTrayEntries(SDL_TrayMenu* menu, int* size) { return SDL_GetTrayEntries(menu, size); }

//! @copydoc SDL_RemoveTrayEntry()
inline void RemoveTrayEntry(SDL_TrayEntry* entry) {  SDL_RemoveTrayEntry(entry); }

//! @copydoc SDL_InsertTrayEntryAt()
inline SDL_TrayEntry* InsertTrayEntryAt(SDL_TrayMenu* menu, int pos, const char* label, SDL::TrayEntryFlags flags) { return SDL_InsertTrayEntryAt(menu, pos, label, flags); }

//! @copydoc SDL_SetTrayEntryLabel()
inline void SetTrayEntryLabel(SDL_TrayEntry* entry, const char* label) {  SDL_SetTrayEntryLabel(entry, label); }

//! @copydoc SDL_GetTrayEntryLabel()
inline const char* GetTrayEntryLabel(SDL_TrayEntry* entry) { return SDL_GetTrayEntryLabel(entry); }

//! @copydoc SDL_SetTrayEntryChecked()
inline void SetTrayEntryChecked(SDL_TrayEntry* entry, bool checked) {  SDL_SetTrayEntryChecked(entry, checked); }

//! @copydoc SDL_GetTrayEntryChecked()
inline bool GetTrayEntryChecked(SDL_TrayEntry* entry) { return SDL_GetTrayEntryChecked(entry); }

//! @copydoc SDL_SetTrayEntryEnabled()
inline void SetTrayEntryEnabled(SDL_TrayEntry* entry, bool enabled) {  SDL_SetTrayEntryEnabled(entry, enabled); }

//! @copydoc SDL_GetTrayEntryEnabled()
inline bool GetTrayEntryEnabled(SDL_TrayEntry* entry) { return SDL_GetTrayEntryEnabled(entry); }

//! @copydoc SDL_SetTrayEntryCallback()
inline void SetTrayEntryCallback(SDL_TrayEntry* entry, SDL_TrayCallback callback, void* userdata) {  SDL_SetTrayEntryCallback(entry, callback, userdata); }

//! @copydoc SDL_ClickTrayEntry()
inline void ClickTrayEntry(SDL_TrayEntry* entry) {  SDL_ClickTrayEntry(entry); }

//! @copydoc SDL_DestroyTray()
inline void DestroyTray(SDL_Tray* tray) {  SDL_DestroyTray(tray); }

//! @copydoc SDL_GetTrayEntryParent()
inline SDL_TrayMenu* GetTrayEntryParent(SDL_TrayEntry* entry) { return SDL_GetTrayEntryParent(entry); }

//! @copydoc SDL_GetTrayMenuParentEntry()
inline SDL_TrayEntry* GetTrayMenuParentEntry(SDL_TrayMenu* menu) { return SDL_GetTrayMenuParentEntry(menu); }

//! @copydoc SDL_GetTrayMenuParentTray()
inline SDL_Tray* GetTrayMenuParentTray(SDL_TrayMenu* menu) { return SDL_GetTrayMenuParentTray(menu); }

//! @copydoc SDL_UpdateTrays()
inline void UpdateTrays() {  SDL_UpdateTrays(); }

//! @copydoc SDL_GetVersion()
inline int GetVersion() { return SDL_GetVersion(); }

//! @copydoc SDL_GetRevision()
inline const char* GetRevision() { return SDL_GetRevision(); }

}

class Window
{
    SDL_Window* _ptr;
public:
    Window(const std::string& title, int w, int h, SDL::WindowFlags flags) { _ptr = SDL::raw::CreateWindow(title.c_str(), w, h, flags); }

    inline SDL_Window* get() const { return _ptr; }
};

class Renderer
{
    SDL_Renderer* _ptr;
public:
    Renderer(SDL::Window* window, const std::string& name) { _ptr = SDL::raw::CreateRenderer(window->get(), name.c_str()); }

    inline SDL_Renderer* get() const { return _ptr; }
};

}